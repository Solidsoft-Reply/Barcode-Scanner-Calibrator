// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Solidsoft.Reply.BarcodeScanner.Calibration.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdviceFeature : object, Xunit.IClassFixture<AdviceFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Advice", "Basic tests for general advice provided by the Calibrator library.\r\nAll tests ass" +
                "ume a computer configured for a standard USA keyboard.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Advice.feature"
#line hidden
        
        public AdviceFeature(AdviceFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="System reads Invariant Characters reliably")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "System reads Invariant Characters reliably")]
        public async System.Threading.Tasks.Task SystemReadsInvariantCharactersReliably()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("System reads Invariant Characters reliably", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("the baseline input is for The United States", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="System reads Invariant Characters reliably with no Format 05/06 assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "System reads Invariant Characters reliably with no Format 05/06 assessment")]
        public async System.Threading.Tasks.Task SystemReadsInvariantCharactersReliablyWithNoFormat0506Assessment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("System reads Invariant Characters reliably with no Format 05/06 assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.GivenAsync("the baseline input is for The United States with no Format 05/06 assessment", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator with no Format 05 or 06" +
                        " assessment", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyNoFo" +
                        "rmatTest", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No GS character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "No GS character reported")]
        public async System.Threading.Tasks.Task NoGSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No GS character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
 await testRunner.GivenAsync("the baseline input is for The United States with no GS", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.ThenAsync("the advice should contain an advice item for CannotReadBarcodesReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No RS character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "No RS character reported")]
        public async System.Threading.Tasks.Task NoRSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No RS character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 32
 await testRunner.GivenAsync("the baseline input is for The United States with no RS", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyExce" +
                        "ptFormat0506", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 36
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAnsiMh1082Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No FS character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "No FS character reported")]
        public async System.Threading.Tasks.Task NoFSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No FS character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
 await testRunner.GivenAsync("the baseline input is for The United States with no FS", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 45
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No US character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "No US character reported")]
        public async System.Threading.Tasks.Task NoUSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No US character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
 await testRunner.GivenAsync("the baseline input is for The United States with no US", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No EOT character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "No EOT character reported")]
        public async System.Threading.Tasks.Task NoEOTCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No EOT character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 61
 await testRunner.GivenAsync("the baseline input is for The United States with no EOT", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 65
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Null GS character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "Null GS character reported")]
        public async System.Threading.Tasks.Task NullGSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Null GS character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 70
 await testRunner.GivenAsync("the baseline input is for The United States with null GS", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 71
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
 await testRunner.ThenAsync("the advice should contain an advice item for HiddenCharactersNotRepresentedCorrec" +
                        "tly", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Null RS character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "Null RS character reported")]
        public async System.Threading.Tasks.Task NullRSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Null RS character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 78
 await testRunner.GivenAsync("the baseline input is for The United States with null RS", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 82
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Null FS character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "Null FS character reported")]
        public async System.Threading.Tasks.Task NullFSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Null FS character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 86
 await testRunner.GivenAsync("the baseline input is for The United States with null FS", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 87
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 89
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 90
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadEdiCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 92
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Null US character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "Null US character reported")]
        public async System.Threading.Tasks.Task NullUSCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Null US character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 96
 await testRunner.GivenAsync("the baseline input is for The United States with null US", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 97
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 100
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadEdiCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 101
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Null EOT character reported")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "Null EOT character reported")]
        public async System.Threading.Tasks.Task NullEOTCharacterReported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Null EOT character reported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 106
 await testRunner.GivenAsync("the baseline input is for The United States with null EOT", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 107
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 108
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 110
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as different control character - agnostic")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as different control character - agnostic")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsDifferentControlCharacter_Agnostic()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as different control character - agnostic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 115
 await testRunner.GivenAsync("the baseline input is for The United States with GS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 116
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 117
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 118
 await testRunner.ThenAsync("the advice should contain an advice item for HiddenCharactersNotRepresentedCorrec" +
                        "tly", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 119
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as different control character - agnostic")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as different control character - agnostic")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsDifferentControlCharacter_Agnostic()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as different control character - agnostic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 123
 await testRunner.GivenAsync("the baseline input is for The United States with RS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 124
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 125
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 126
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 127
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as different control character - agnostic")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as different control character - agnostic")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsDifferentControlCharacter_Agnostic()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as different control character - agnostic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 131
 await testRunner.GivenAsync("the baseline input is for The United States with FS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 132
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 133
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 135
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadEdiCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 136
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 137
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as different control character - agnostic")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as different control character - agnostic")]
        public async System.Threading.Tasks.Task USCharacterReportedAsDifferentControlCharacter_Agnostic()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as different control character - agnostic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 141
 await testRunner.GivenAsync("the baseline input is for The United States with US as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 142
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 143
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 145
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadEdiCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 146
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 147
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as different control character - agnostic")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as different control character - agnostic")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsDifferentControlCharacter_Agnostic()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as different control character - agnostic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 151
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 152
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 153
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 154
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 155
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 156
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as different control character - calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as different control character - calibration")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsDifferentControlCharacter_Calibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as different control character - calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 160
 await testRunner.GivenAsync("the baseline input is for The United States with GS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 161
 await testRunner.WhenAsync("the baseline input to submitted to a calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 162
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 163
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 164
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as different control character - calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as different control character - calibration")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsDifferentControlCharacter_Calibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as different control character - calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 168
 await testRunner.GivenAsync("the baseline input is for The United States with RS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 169
 await testRunner.WhenAsync("the baseline input to submitted to a calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 170
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 171
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 172
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as different control character - calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as different control character - calibration")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsDifferentControlCharacter_Calibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as different control character - calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 176
 await testRunner.GivenAsync("the baseline input is for The United States with FS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 177
 await testRunner.WhenAsync("the baseline input to submitted to a calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 178
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 179
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 180
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as different control character - calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as different control character - calibration")]
        public async System.Threading.Tasks.Task USCharacterReportedAsDifferentControlCharacter_Calibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as different control character - calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 184
 await testRunner.GivenAsync("the baseline input is for The United States with US as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 185
 await testRunner.WhenAsync("the baseline input to submitted to a calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 186
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 187
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 188
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as different control character - calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as different control character - calibration")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsDifferentControlCharacter_Calibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as different control character - calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 192
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 193
 await testRunner.WhenAsync("the baseline input to submitted to a calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 194
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 195
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 196
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as different control character - no calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as different control character - no calibration")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsDifferentControlCharacter_NoCalibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as different control character - no calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 200
 await testRunner.GivenAsync("the baseline input is for The United States with GS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 201
 await testRunner.WhenAsync("the baseline input to submitted to a no calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 202
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 203
 await testRunner.ThenAsync("the advice should contain an advice item for HiddenCharactersNotRepresentedCorrec" +
                        "tlyNoCalibration", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 204
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as different control character - no calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as different control character - no calibration")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsDifferentControlCharacter_NoCalibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as different control character - no calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 208
 await testRunner.GivenAsync("the baseline input is for The United States with RS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 209
 await testRunner.WhenAsync("the baseline input to submitted to a no calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 210
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 211
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyExce" +
                        "ptFormat0506", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 212
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as different control character - no calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as different control character - no calibration")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsDifferentControlCharacter_NoCalibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as different control character - no calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 216
 await testRunner.GivenAsync("the baseline input is for The United States with FS as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 217
 await testRunner.WhenAsync("the baseline input to submitted to a no calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 218
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 219
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 220
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 221
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 222
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as different control character - no calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as different control character - no calibration")]
        public async System.Threading.Tasks.Task USCharacterReportedAsDifferentControlCharacter_NoCalibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as different control character - no calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 226
 await testRunner.GivenAsync("the baseline input is for The United States with US as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 227
 await testRunner.WhenAsync("the baseline input to submitted to a no calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 228
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 229
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 230
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 231
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 232
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as different control character - no calibration")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as different control character - no calibration")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsDifferentControlCharacter_NoCalibration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as different control character - no calibration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 236
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as different character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 237
 await testRunner.WhenAsync("the baseline input to submitted to a no calibration calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 238
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 239
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyExce" +
                        "ptFormat0506", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 240
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 241
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as ambiguous invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as ambiguous invariant character")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsAmbiguousInvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as ambiguous invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 245
 await testRunner.GivenAsync("the baseline input is for The United States with GS as ambiguous invariant charac" +
                        "ter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 246
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 247
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 248
 await testRunner.ThenAsync("the advice should contain an advice item for CannotReadBarcodesReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 249
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as ambiguous invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as ambiguous invariant character")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsAmbiguousInvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as ambiguous invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 251
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 253
 await testRunner.GivenAsync("the baseline input is for The United States with RS as ambiguous invariant charac" +
                        "ter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 254
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 255
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 256
 await testRunner.ThenAsync("the advice should contain an advice item for CannotReadBarcodesReliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 257
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAnsiMh1082Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 258
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as ambiguous invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as ambiguous invariant character")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsAmbiguousInvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as ambiguous invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 260
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 262
 await testRunner.GivenAsync("the baseline input is for The United States with FS as ambiguous invariant charac" +
                        "ter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 263
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 264
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 265
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 266
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 267
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 268
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as ambiguous invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as ambiguous invariant character")]
        public async System.Threading.Tasks.Task USCharacterReportedAsAmbiguousInvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as ambiguous invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 270
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 272
 await testRunner.GivenAsync("the baseline input is for The United States with US as ambiguous invariant charac" +
                        "ter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 273
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 274
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 275
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 276
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 277
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 278
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as ambiguous invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as ambiguous invariant character")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsAmbiguousInvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as ambiguous invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 280
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 282
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as ambiguous invariant chara" +
                        "cter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 283
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 284
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 285
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 286
 await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 287
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as ambiguous non-invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as ambiguous non-invariant character")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsAmbiguousNon_InvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as ambiguous non-invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 291
 await testRunner.GivenAsync("the baseline input is for The United States with GS as ambiguous non-invariant ch" +
                        "aracter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 292
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 293
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 294
 await testRunner.ThenAsync("the advice should contain an advice item for HiddenCharactersNotRepresentedCorrec" +
                        "tly", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 295
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadNonInvariantCharactersReli" +
                        "ably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 296
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as ambiguous non-invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as ambiguous non-invariant character")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsAmbiguousNon_InvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as ambiguous non-invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 298
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 300
 await testRunner.GivenAsync("the baseline input is for The United States with RS as ambiguous non-invariant ch" +
                        "aracter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 301
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 302
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 303
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 304
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadNonInvariantCharactersReli" +
                        "ably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 305
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as ambiguous non-invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as ambiguous non-invariant character")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsAmbiguousNon_InvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as ambiguous non-invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 309
 await testRunner.GivenAsync("the baseline input is for The United States with FS as ambiguous non-invariant ch" +
                        "aracter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 310
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 311
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 312
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 313
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 314
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 315
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as ambiguous non-invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as ambiguous non-invariant character")]
        public async System.Threading.Tasks.Task USCharacterReportedAsAmbiguousNon_InvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as ambiguous non-invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 319
 await testRunner.GivenAsync("the baseline input is for The United States with US as ambiguous non-invariant ch" +
                        "aracter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 320
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 321
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 322
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 323
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 324
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 325
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as ambiguous non-invariant character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as ambiguous non-invariant character")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsAmbiguousNon_InvariantCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as ambiguous non-invariant character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 327
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 329
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as ambiguous non-invariant c" +
                        "haracter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 330
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 331
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 332
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 333
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadNonInvariantCharactersReli" +
                        "ably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 334
     await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 335
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as AIM flag character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as AIM flag character")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsAIMFlagCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as AIM flag character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 337
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 339
 await testRunner.GivenAsync("the baseline input is for The United States with GS as AIM flag character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 340
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 341
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 342
 await testRunner.ThenAsync("the advice should contain an advice item for HiddenCharactersNotRepresentedCorrec" +
                        "tly", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 343
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAim", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 344
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadNonInvariantCharactersReli" +
                        "ably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 345
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as AIM flag character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as AIM flag character")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsAIMFlagCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as AIM flag character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 347
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 349
 await testRunner.GivenAsync("the baseline input is for The United States with RS as AIM flag character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 350
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 351
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 352
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 353
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAim", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 354
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadNonInvariantCharactersReli" +
                        "ably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 355
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as AIM flag character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as AIM flag character")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsAIMFlagCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as AIM flag character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 357
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 359
 await testRunner.GivenAsync("the baseline input is for The United States with FS as AIM flag character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 360
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 361
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 362
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 363
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 364
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii28Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 365
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as AIM flag character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as AIM flag character")]
        public async System.Threading.Tasks.Task USCharacterReportedAsAIMFlagCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as AIM flag character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 367
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 369
 await testRunner.GivenAsync("the baseline input is for The United States with US as AIM flag character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 370
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 371
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 372
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 373
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadEdiCharacters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 374
     await testRunner.AndAsync("the advice should contain an advice item for CannotReadAscii31Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 375
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as AIM flag character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as AIM flag character")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsAIMFlagCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as AIM flag character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 377
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 379
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as AIM flag character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 380
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 381
  await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 382
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 383
  await testRunner.AndAsync("the advice should contain an advice item for CannotReadAim", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 384
  await testRunner.AndAsync("the advice should contain an advice item for CannotReadNonInvariantCharactersReli" +
                        "ably", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 385
  await testRunner.AndAsync("the advice should contain an advice item for MayNotReadAscii04Characters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 386
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as dead key character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as dead key character")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsDeadKeyCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as dead key character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 388
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 390
 await testRunner.GivenAsync("the baseline input is for The United States with GS as dead key character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 391
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 392
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 393
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 394
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as dead key character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as dead key character")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsDeadKeyCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as dead key character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 396
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 398
 await testRunner.GivenAsync("the baseline input is for The United States with RS as dead key character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 399
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 400
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 401
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 402
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as dead key character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as dead key character")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsDeadKeyCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as dead key character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 404
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 406
 await testRunner.GivenAsync("the baseline input is for The United States with FS as dead key character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 407
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 408
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 409
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 410
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as dead key character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as dead key character")]
        public async System.Threading.Tasks.Task USCharacterReportedAsDeadKeyCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as dead key character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 412
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 414
 await testRunner.GivenAsync("the baseline input is for The United States with US as dead key character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 415
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 416
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 417
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 418
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as dead key character")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as dead key character")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsDeadKeyCharacter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as dead key character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 420
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 422
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as dead key character", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 423
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 424
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 425
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 426
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GS character reported as ligature")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "GS character reported as ligature")]
        public async System.Threading.Tasks.Task GSCharacterReportedAsLigature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("GS character reported as ligature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 428
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 430
 await testRunner.GivenAsync("the baseline input is for The United States with GS as ligature", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 431
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 432
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 433
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 434
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="RS character reported as ligature")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "RS character reported as ligature")]
        public async System.Threading.Tasks.Task RSCharacterReportedAsLigature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("RS character reported as ligature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 436
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 438
 await testRunner.GivenAsync("the baseline input is for The United States with RS as ligature", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 439
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 440
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 441
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 442
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FS character reported as ligature")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "FS character reported as ligature")]
        public async System.Threading.Tasks.Task FSCharacterReportedAsLigature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FS character reported as ligature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 444
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 446
 await testRunner.GivenAsync("the baseline input is for The United States with FS as ligature", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 447
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 448
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 449
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 450
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="US character reported as ligature")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "US character reported as ligature")]
        public async System.Threading.Tasks.Task USCharacterReportedAsLigature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("US character reported as ligature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 452
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 454
 await testRunner.GivenAsync("the baseline input is for The United States with US as ligature", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 455
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 456
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 457
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 458
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="EOT character reported as ligature")]
        [Xunit.TraitAttribute("FeatureTitle", "Advice")]
        [Xunit.TraitAttribute("Description", "EOT character reported as ligature")]
        public async System.Threading.Tasks.Task EOTCharacterReportedAsLigature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("EOT character reported as ligature", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 460
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 462
 await testRunner.GivenAsync("the baseline input is for The United States with EOT as ligature", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 463
 await testRunner.WhenAsync("the baseline input is submitted to an agnostic calibrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 464
     await testRunner.AndAsync("advice is generated from the calculated system capabilities", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 465
 await testRunner.ThenAsync("the advice should contain an advice item for ReadsInvariantCharactersReliablyMayN" +
                        "otReadFormat0506Reliably", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 466
  await testRunner.AndAsync("the advice should contain no other advice items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AdviceFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AdviceFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
