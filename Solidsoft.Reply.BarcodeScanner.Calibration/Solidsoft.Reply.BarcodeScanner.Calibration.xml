<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solidsoft.Reply.BarcodeScanner.Calibration</name>
    </assembly>
    <members>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Advice">
            <summary>
              Provides an ordered sequence of advice items.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Advice._adviceItems">
            <summary>
              An ordered list of advice items.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Advice.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Advice"/> class.
            </summary>
            <param name="systemCapabilities">The capabilities of the barcode scanner/computer combination.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Advice.Items">
            <summary>
              Gets an ordered collection of advice items.
            </summary>
            <returns>An ordered collection of advice items.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Advice.CreateAdvice(Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities)">
            <summary>
              Factory method for creating new Advice.
            </summary>
            <param name="systemCapabilities">The capabilities of the barcode scanner/computer combination.</param>
            <returns>An ordered sequence of advice items.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem">
            <summary>
              Represents an individual item of advice for a given condition.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType,System.Object[])">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem"/> class;.
            </summary>
            <param name="adviceType">The type of advice.</param>
            <param name="substitutions">Substituted text items for formatted strings.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType,System.String,System.String,System.Collections.Generic.IList{System.String},Solidsoft.Reply.BarcodeScanner.Calibration.ConditionSeverity)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem"/> class;.
            </summary>
            <param name="adviceType">The type of advice.</param>
            <param name="condition">The condition for which advice is provided.</param>
            <param name="description">Supplemental description of the condition.</param>
            <param name="advice">The advice for the condition.</param>
            <param name="severity">The severity of the condition.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.AdviceType">
            <summary>
              Gets the type of advice.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.Condition">
            <summary>
              Gets the condition for which advice is provided.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.Description">
            <summary>
              Gets the condition for which advice is provided.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.Advice">
            <summary>
              Gets the advice for the condition.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.Severity">
            <summary>
              Gets the severity of the condition.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.op_Equality(Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem,Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem)">
            <summary>
              Override for the equality operator.
            </summary>
            <param name="item1">The first advice item.</param>
            <param name="item2">The second advice item.</param>
            <returns>True, if the advice items are equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.op_Inequality(Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem,Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem)">
            <summary>
              Override for the inequality operator.
            </summary>
            <param name="item1">The first advice item.</param>
            <param name="item2">The second advice item.</param>
            <returns>True, if the advice items are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.FromJson(System.String)">
            <summary>
              Creates an advice item from a JSON string representing the serialized data.
            </summary>
            <param name="json">A JSON string representing the serialized data.</param>
            <returns>The deserialised advice item.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.Equals(Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem)">
            <summary>
              Tests the equality of this advice item with another.
            </summary>
            <param name="other">The advice item to be tested.</param>
            <returns>True, if the advice items are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.Equals(System.Object)">
            <summary>
              Tests the equality of this advice item with another.
            </summary>
            <param name="obj">The advice item to be tested.</param>
            <returns>True, if the advice items are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.GetHashCode">
            <summary>
              Returns a hash value for the current advice item.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.ToString">
            <summary>
              Returns a JSON representation of the advice item.
            </summary>
            <returns>A JSON representation of the advice item.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the advice item.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceItem.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
              Handles errors in serialization and deserialization.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType">
            <summary>
              The types of advice provided through analysis of the calibration results.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.None">
            <summary>
            <p>No advice provided.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.TestFailed">
            <summary>
            <p>The test failed.</p>
            <p>You may have scanned a wrong barcode. Try again, making sure you scan the correct barcode(s).</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.NoDataReported">
            <summary>
            <p>No data was reported for the barcode.</p>
            <p>Try again, making sure you scan the correct barcode(s).</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.PartialDataReported">
            <summary>
            <p>Some data was not reported when you scanned the barcode.</p>
            <p>Your barcode scanner or system may be slow or there may be a fault. Try again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.NoDataReportedDeadKeys">
            <summary>
            <p>No data was reported for one or more barcodes.</p>
            <p>Try again, making sure you scan the correct barcode(s).</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.IncorrectSequenceDeadKeys">
            <summary>
            <p>You scanned a barcode out of sequence.</p>
            <p>Try again, making sure you scan the correct barcode. If you need to scan multiple barcodes, make
              sure you scan them in the correct order.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.PartialDataReportedDeadKeys">
            <summary>
            <p>Some data was not reported when you scanned one or more barcodes.</p>
            <p>Your barcode scanner or system may be slow or there may be a fault. Try again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.LayoutsDoNotMatch">
            <summary>
            <p>Your barcode scanner and computer keyboard layouts are different.</p>
            <p>Your software may not be able to compensate. Configure your barcode scanner to match your computer
              keyboard layout or emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.LayoutsDoNotMatchNoCalibration">
            <summary>
            <p>Your barcode scanner and computer keyboard layouts are different.</p>
            <p>Configure your barcode scanner to match your computer keyboard layout or emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.HiddenCharactersNotRepresentedCorrectly">
            <summary>
            <p>Hidden characters in barcodes are not reported correctly.</p>
            <p>Your software may not be able to compensate. Configure your barcode scanner to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.HiddenCharactersNotRepresentedCorrectlyNoCalibration">
            <summary>
            <p>Hidden characters in barcodes are not reported correctly.</p>
            <p>Configure your barcode scanner to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.LayoutsDoNotMatchNoFormat0506">
            <summary>
            <p>Your barcode scanner and computer keyboard layouts are different.</p>
            <p>Your software may be able to compensate. However, your system cannot read characters correctly
            for barcodes that contain Format 05 or Format 06 data. Some software may be able to compensate for
            this by analysing key codes rather than characters.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.HiddenCharactersNotReportedCorrectlyNoFormat0506">
            <summary>
            <p>Hidden characters in barcodes are not reported correctly.</p>
            <p>Your software may be able to compensate. However, your system cannot read barcode characters
            correctly for barcodes that contain Format 05 or Format 06 data. Some software may be able to
            compensate for this by analysing key codes rather than characters.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CannotReadBarcodesReliably">
            <summary>
            <p>Your system cannot read barcode characters reliably.</p>
            <p>Configure your barcode scanner to emulate a different keyboard layout or a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockOn">
            <summary>
            <p>Caps Lock is switched on.</p>
            <p>Switch Caps Lock off and test again.</p>
            <p>If you must keep Caps Lock switched on while scanning barcodes, you may be able to
            configure your barcode scanner to compensate.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockOnMacintosh">
            <summary>
            <p>Caps Lock is switched on.</p>
            <p>Switch Caps Lock off and try again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockOnConvertsToUpperCase">
            <summary>
            <p>Your system converts characters to upper case.</p>
            <p>Check your scanner, keyboard and computer configuration and reconfigure them if necessary. Switch
              off Caps Lock and test again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockOnConvertsToLowerCase">
            <summary>
            <p>Your system converts characters to lower case.</p>
            <p>Check your scanner, keyboard and computer configuration and reconfigure them if necessary. Switch
              off Caps Lock and test again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CaseIsSwitched">
            <summary>
            <p>You system converts upper and lower case characters.</p>
            <p>Your scanner may be configured to emulate Caps Lock. Check your scanner, keyboard and computer
              configuration and reconfigure them if necessary.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.ConvertsToUpperCase">
            <summary>
            <p>Your system converts characters to upper case.</p>
            <p>Check your scanner, keyboard and computer configuration and reconfigure them if necessary.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.ConvertsToLowerCase">
            <summary>
            <p>Your system converts characters to lower case.</p>
            <p>Check your scanner, keyboard and computer configuration and reconfigure them if necessary.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.NoSupportForCase">
            <summary>
            <p>Your keyboard layout supports {0} characters and cannot read barcodes reliably.</p>
            <p>If possible, configure your computer to use a different keyboard layout. Otherwise, configure
              your barcode scanner to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.UnexpectedErrorReported">
            <summary>
            <p>An unexpected error was reported.</p>
            <p>Try again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.NotTransmittingAim">
            <summary>
            <p>Your barcode scanner does not transmit AIM identifiers.</p>
            <p>Configure your barcode scanner to transmit AIM identifiers. Your software can then determine
              what kind of barcode you scanned and do a better job if you scan the wrong barcode.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockCompensation">
            <summary>
            <p>Caps Lock is on, but case is preserved.</p>
            <p>Your scanner may be configured to compensate automatically for Caps Lock. Switch off Caps
              Lock and test again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockOnPreservationMacintosh">
            <summary>
            <p>Caps Lock is on, but case is preserved.</p>
            <p>Check your scanner, keyboard and computer configuration and reconfigure them if necessary.
              Switch off Caps Lock and test again.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CapsLockOnNoCase">
            <summary>
            <p>Caps Lock is switched on.</p>
            <p>However, your computer keyboard layout does not support upper and lower-case letters. You
              should probably switch Caps Lock off.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.NotTransmittingEndOfLine">
            <summary>
            <p>Your barcode scanner does not transmit an end-of-line sequence.</p>
            <p>Configure your barcode scanner to transmit end-of-line sequences. This may speed up
              scanning.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.TransmittingPrefix">
            <summary>
            <p>Your barcode scanner transmits a prefix.</p>
            <p>If you have problems scanning barcode data, configure your barcode scanner so that it
            does not transmit a prefix.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.TransmittingSuffix">
            <summary>
            <p>Your barcode scanner transmits a suffix.</p>
            <p>If you have problems scanning barcode data, configure your barcode scanner so that it
            does not transmit any suffix.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadAim">
            <summary>
            <p>Your system may not read AIM identifier characters.</p>
            <p>AIM identifiers represent the barcode type. Your verification software may use them to
            eliminate unnecessary alerts. However, the software must implement character mapping to
            read AIM identifiers reliably.</p>
            <p>Make sure your keyboard layouts match. If necessary, configure your barcode scanner to
            emulate a numeric keypad.</p>;
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CannotReadAimNoCalibration">
            <summary>
            <p>Your system cannot read AIM identifier characters.</p>
            <p>AIM identifiers represent the barcode type. Your verification software may use them to
            eliminate unnecessary alerts.</p>
            <p>Make sure your keyboard layouts match. If necessary, configure your barcode scanner to
            emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotTransmitAim">
            <summary>
            <p>Your barcode scanner may not transmit AIM identifiers.</p>
            <p>Check that your barcode scanner is configured to transmit AIM identifiers. Your software can use
              AIM identifiers to determine what kind of barcode you scanned and do a better job if you scan the
              wrong barcode.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CannotReadAim">
            <summary>
            <p>Your system cannot read the barcode type identifier.</p>
            <p>Make sure your keyboard layouts match. If necessary, configure your barcode scanner to
              emulate a numeric keypad and to transmit AIM identifiers.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadFormat0506">
            <summary>
            <p>Your system may not be able to read Format 05 or Format 06 barcodes reliably.</p>
            <p>If you experience problems when scanning barcodes that contain Format 05 or Format 06 data,
            enter data manually into your software. If necessary, configure your barcode scanner to emulate a
            numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadFormat0506NoCalibration">
            <summary>
            <p>Your system cannot read Format 05 or Format 06 barcodes reliably.</p>
            <p>Enter data manually into your software for barcodes that contain Format 05 or Format 06 data.
            If necessary, configure your barcode scanner to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CannotReadAnsiMh1082Reliably">
            <summary>
            <p>Your system cannot read Format 05 or Format 06 barcodes reliably.</p>
            <p>Enter data manually into your software for barcodes that contain Format 05 or Format 06 data.
            If necessary, configure your barcode scanner to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.Gs1OnlyTest">
            <summary>
            <p>You did not test compatibility for compatibility with ISO/IEC 15434.</p>
            <p>If you expect to scan barcodes that contain data formatted according to ISO/IEC 15434,
            run the test again, this time including the ISO/IEC 15434 data compatibility test.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.SlowScannerPerformance">
            <summary>
            <p>Your barcode scanner input performance is slower than expected.</p>
            <p>Check the configuration of your barcode scanner, looking for settings that will improve keyboard entry performance.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.VerySlowScannerPerformance">
            <summary>
            <p>Your barcode scanner input performance is very poor.</p>
            <p>Check the configuration of your barcode scanner, looking for settings that will improve keyboard
              entry performance.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadNonInvariantCharactersReliably">
            <summary>
            <p>Your system cannot read non-invariant characters reliably.</p>
            <p>However, your software may be able to compensate for this. Some barcodes may contain non-invariant
              characters.</p>
            <p>If you scan other barcodes, and experience difficulty, try configuring your barcode scanner to
              emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadNonInvariantCharactersNoCalibration">
            <summary>
            <p>Your system may not read non-invariant characters reliably.</p>
            <p>Some barcodes may contain non-invariant characters.</p>
            <p>If you scan other barcodes, and experience difficulty, try configuring your barcode scanner
              to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CannotReadNonInvariantCharacters">
            <summary>
            <p>Your system cannot read non-invariant characters reliably.</p>
            <p>Some barcodes may contain non-invariant characters.</p>
            <p>If you scan other barcodes, and experience difficulty, try configuring your barcode scanner to
            emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadEdiCharactersReliably">
            <summary>
            <p>Your system cannot read EDI data reliably.</p>
            <p>Some barcodes may contain EDI data. Your software must implement character mapping to read these barcodes reliably.</p>
            <p>If you scan EDI barcodes, and experience difficulty, try configuring your barcode scanner to
              emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.MayNotReadEdiCharactersNoCalibration">
            <summary>
            <p>Your system may not read EDI characters reliably.</p>
            <p>Some barcodes may contain EDI characters.</p>
            <p>If you scan EDI barcodes, and experience difficulty, try configuring your barcode scanner
              to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.CannotReadEdiCharacters">
            <summary>
            <p>Your system cannot read EDI characters reliably.</p>
            <p>Some barcodes may contain EDI data.</p>
            <p>If you scan EDI barcodes, and experience difficulty, try configuring your barcode scanner to
            emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.ReadsInvariantCharactersReliably">
            <summary>
            <p>Your system reads most barcodes reliably.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.ReadsInvariantCharactersReliablyNoFormatTest">
            <summary>
            <p>Your system reads most barcodes reliably.</p>
            <p>However, you did not test compatibility with ISO/IEC 15434. Your system may not be able to read
            barcodes reliably if they contain data formatted according to ISO/IEC 15434.</p>
            <p>You may need to enter data manually into your software for barcodes that contain data formatted
            according to ISO/IEC 15434 characters.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.ReadsInvariantCharactersReliablyMayNotReadFormat0506Reliably">
            <summary>
            <p>Your system reads GS1 barcodes reliably.</p>
            <p>However, your verification software may not read barcodes reliably if the contain data formatted
            according to ISO/IEC 15434.</p>
            <p>If you experience problems when scanning barcodes that contain Format 05 or Format 06 data, enter
            data manually into your software. If necessary, configure your barcode scanner to emulate a numeric
            keypad.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.AdviceType.ReadsInvariantCharactersReliablyExceptFormat0506">
            <summary>
            <p>Your system reads GS1 barcodes reliably.</p>
            <p>However, it cannot read barcodes reliably if the contain data formatted according to ISO/IEC 15434.</p>
            <p>Enter data manually into your software for barcodes that contain Format 05 or Format 06 data. If
            necessary, configure your barcode scanner to emulate a numeric keypad.</p>
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity">
            <summary>
              Represents a calibration ambiguity for one or more expected character sequences
              and an ambiguous reported character sequence.
            </summary>
            <param name="Expected">Gets an array of expected character sequences.</param>
            <param name="Reported">Gets an ambiguous reported character sequence.</param>
            <param name="InvariantCharactersOnly">
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</param>
            <param name="DeadKey">Gets a value indicating whether the reported character is a dead key.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity.#ctor(System.Collections.Generic.IList{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
              Represents a calibration ambiguity for one or more expected character sequences
              and an ambiguous reported character sequence.
            </summary>
            <param name="Expected">Gets an array of expected character sequences.</param>
            <param name="Reported">Gets an ambiguous reported character sequence.</param>
            <param name="InvariantCharactersOnly">
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</param>
            <param name="DeadKey">Gets a value indicating whether the reported character is a dead key.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity.Expected">
            <summary>Gets an array of expected character sequences.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity.Reported">
            <summary>Gets an ambiguous reported character sequence.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity.InvariantCharactersOnly">
            <summary>
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity.DeadKey">
            <summary>Gets a value indicating whether the reported character is a dead key.</summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Assumption">
            <summary>
              The assumption made concerning the use of calibration in client systems. The mode controls the
              perspective from which advice is provided based on a stated assumption, or lack of assumption,
              about the capabilities of client systems.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Assumption.Agnostic">
            <summary>
              Provide advice from the perspective of a user whose client system may not support calibration.
              In this case, the advice must address the lowest-common-denominator of client systems that do
              not process the character input to recover the original data in a barcode. However, the advice
              is provided in an agnostic fashion, with no assumptions about the capabilities of any client
              system. Use this mode in scenarios where the client system capabilities are unknown.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Assumption.Calibration">
            <summary>
              Provide advice from the perspective of a user whose client system supports calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Assumption.NoCalibration">
            <summary>
              Provide advice from the perspective of a user whose client system does not support calibration.
              In this case, the advice addresses only the lowest-common-denominator of client systems that do
              not process the character input to recover the original data in a barcode.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData">
            <summary>
              Represents barcode data for calibration.
            </summary>
            <remarks>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData" /> class.
            </remarks>
            <param name="data">The calibration data.</param>
            <param name="maximumCharacters">The maximum number of characters in each barcode.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData.#ctor(System.String,System.Int32)">
            <summary>
              Represents barcode data for calibration.
            </summary>
            <remarks>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData" /> class.
            </remarks>
            <param name="data">The calibration data.</param>
            <param name="maximumCharacters">The maximum number of characters in each barcode.</param>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData._data">
            <summary>
              The calibration data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData._maximumCharacters">
            <summary>
              The maximum number of characters in each barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData._parsedData">
            <summary>
              A collection of strings representing individual characters in the barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData._segments">
            <summary>
              A collection of calibration data segments for individual barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData.Segments">
            <summary>
              Gets a collection of calibration data segments for individual barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData.Count">
            <summary>
              Gets the count of barcode data segments.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData.ParseData(System.String)">
            <summary>
              Parses data to a collection of strings representing characters in the barcode.
            </summary>
            <param name="data">The data to be parsed.</param>
            <returns>A collection of strings representing characters in the barcode.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeData.ProcessSegments">
            <summary>
              Yields a collection of calibration data segments for individual barcodes.
            </summary>
            <returns>A data segment.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance">
            <summary>
              The likely provenance of the calibration barcode. This is determined through statistical analysis of its data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance.Baseline">
            <summary>
              The barcode appears to be a fully-reported baseline barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance.DeadKey">
            <summary>
              The barcode appears to be a fully-reported dad key barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance.PartialBaseline">
            <summary>
              The barcode appears to be a partially-reported baseline barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance.PartialDeadkey">
            <summary>
              The barcode appears to be a partially-reported dead key barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance.Unknown">
            <summary>
              The barcode appears not to be a calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeProvenance.NoData">
            <summary>
              No barcode data was reported.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeType">
            <summary>
            The types of calibration barcode generated by the library.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeType.Baseline">
            <summary>
            A baseline barcode used to test basic character mapping, detect dead keys, etc.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.BarcodeType.DeadKey">
            <summary>
            A dead key barcode used to test dead keys in combination with other characters.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.BaseRecord">
             <summary>
            
             </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.BaseRecord.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BaseRecord.FromJson``1(System.String)">
            <summary>
              Returns an object representing a JSON representation of the object.
            </summary>
            <typeparam name="T">The record type to be deserialised.</typeparam>
            <param name="json">A JSON string representing the serialized data.</param>
            <returns>The deserialised object.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BaseRecord.ToString">
            <summary>
              Returns a JSON representation of the object.
            </summary>
            <returns>A JSON representation of the calibration information.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BaseRecord.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the object.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.BaseRecord.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Handles deserialisation errors.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException">
            <summary>
              Represents a calibration exception.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException" /> class.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException" /> class.
            </summary>
            <param name="message">
              The message.
            </param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationException" /> class.
            </summary>
            <param name="message">
              The message.
            </param>
            <param name="innerException">
              The inner exception.
            </param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions">
            <summary>
              Extension methods for calibration.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.StripTrailingCrLfs(System.String,System.String@)">
            <summary>
              Strips off any trailing carriage return and line feed characters.
            </summary>
            <param name="input">The input data from which trailing CR and LF characters will be stripped.</param>
            <param name="trailingCrLfChars">The trailing CR and LF characters, if any; Otherwise, and empty string.</param>
            <returns>The input without any trailing carriage return and line feed characters.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.StripTrailingCrLfs(System.String,System.Boolean)">
            <summary>
              Strips off any trailing carriage return and line feed characters.
            </summary>
            <param name="input">The input data from which trailing CR and LF characters will be stripped.</param>
            <param name="baseline">Indicates if this is the baseline barcode or the last small barcode in the baseline sequence.</param>
            <returns>The input data without any trailing CR or LF characters.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.TryUnusedExtendedAsciiCharacter(System.String,System.Char@)">
            <summary>
              Finds an extended ASCII character that is not being used in the input string.
            </summary>
            <param name="input">The input string.</param>
            <param name="unusedChar">The first extended ASCII char that does not appear in the input.</param>
            <returns>True, if an unused extended ASCII character was found; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.UnusedExtendedAsciiCharacter(System.String)">
            <summary>
              Finds an extended ASCII character that is not being used in the input string.
            </summary>
            <param name="input">The input string.</param>
            <returns>An extended ASCII character that is not being used in the input string.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.NormaliseCharacters(System.String,System.Collections.Generic.IDictionary{System.Char,System.Char},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
              Processes a string, normalising it according to the calibration character map,
              converting into the correct sequence of characters.
            </summary>
            <param name="characters">
              The string to be processed. This is data transmitted by the barcode scanner, as reported to
              the application.
            </param>
            <param name="dataCharacterMap">The character map.</param>
            <param name="deadKeyCharacterMap">The dead key character map.</param>
            <param name="deadKeysMap">The dead keys map.</param>
            <param name="aimFlagCharacterSequence">The AIM flag character sequence.</param>
            <returns>The normalised string, processed according to the calibration character map.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.IsInvariant(System.Char)">
            <summary>
              Determines if a character is drawn from the invariant character set.
            </summary>
            <param name="character">The character to be assessed.</param>
            <returns>True, if the character is invariant; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.ToControlPicture(System.Char)">
            <summary>
              Converts an ASCII control character to a Unicode Control Picture character.
            </summary>
            <param name="originalChar">The original character.</param>
            <returns>
              The Unicode Control Picture character. If the original character is not an ASCII
              control character, it is returned unchanged.
            </returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.ToControlPictureString(System.Char)">
            <summary>
              Converts an ASCII control character to a Unicode Control Picture string.
            </summary>
            <param name="originalChar">The original character.</param>
            <returns>
              The Unicode Control Picture string. If the original character is not an ASCII
              control character, it is returned unchanged.
            </returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.ToControlPictures(System.String)">
            <summary>
              Converts any ASCII control characters in a string to Unicode Control Picture characters.
            </summary>
            <param name="originalString">The original string.</param>
            <returns>A string containing Unicode Control Pictures for any ASCII control characters.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.LineTerminators">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;strippedData&gt;.*?)(?&lt;lineTerminators&gt;[\\r\\n]+)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "strippedData" capture group.<br/>
                ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ "lineTerminators" capture group.<br/>
                ○ Match a character in the set [\n\r] greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CalibrationExtensions.ControlCharTerminators">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;strippedData&gt;.*?) {4}(?&lt;lineTerminators&gt;[\\x01..\\x1F]+)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "strippedData" capture group.<br/>
                ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Match the string "    ".<br/>
            ○ "lineTerminators" capture group.<br/>
                ○ Match a character in the set [\u0001\u001F.] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Preprocessor">
            <summary>
              Delegate for pre-processor functions.
            </summary>
            <param name="input">The data input to be pre-processed.</param>
            <param name="exceptions">Collection of exceptions.</param>
            <returns>The pre-processed data.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator">
            <summary>
              Manages the calibration for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AsciiChars">
            <summary>
              ASCII Character set.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SegmentDelimiter">
            <summary>
              The section delimiter.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AsciiNullChar">
            <summary>
            Value for ASCII Null character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AsciiLineFeedChar">
            <summary>
            Value for ASCII Line Feed character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.NonInvariantCharacters">
            <summary>
            Array on non-invariant, non-control ASCII characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._baselineBarcodeData">
            <summary>
              The baseline barcode data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._baselineBarcodeDataFormat06">
            <summary>
              The baseline barcode data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._unescapedSplitChars">
            <summary>
              Split characters that require escaping.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._assumption">
            <summary>
              The assumption made concerning the use of calibration in client systems.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataNonInvariantAmbiguities">
            <summary>
              A dictionary of ambiguous non-invariant character sequences that map to a reported character sequence.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataInvariantGs1Ambiguities">
            <summary>
              A dictionary of ambiguous invariant or other character sequences that may be used in GS1-compliant barcodes.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataNonInvariantUnrecognisedCharacters">
            <summary>
              A list of unrecognised non-invariant characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataInvariantGs1UnrecognisedCharacters">
            <summary>
              A list of unrecognised invariant or other characters that may be used in GS1-compliant barcodes.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._invariantMappedCharacters">
            <summary>
              A list of the reported characters mapped to invariant characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._nonInvariantMappedCharacters">
            <summary>
              A list of the reported characters mapped to non-invariant characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._barcodeDataSegments">
            <summary>
              The current barcode data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._expectedReportedPrefix">
            <summary>
              The expected value of the prefix reported by a barcode scanner during calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._processedInvariantCharacters">
            <summary>
              Dictionary of invariant characters used to ensure that there
              are no unreported characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._processedNonInvariantCharacters">
            <summary>
              Dictionary of non-invariant characters used to ensure that there
              are no unreported characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenBitmapStream">
            <summary>
              The stream containing the bitmap image of the current calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenSvg">
            <summary>
              The SVG content of the image of the current calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenRemaining">
            <summary>
              A count of the estimated number of barcodes that still need to be scanned during this session.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenSize">
            <summary>
              The size of data matrix required.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenKeyboardMatch">
            <summary>
              Indicates whether the barcode scanner and computer keyboard layouts correspond.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenCalibrationSessionAbandoned">
            <summary>
              Indicates whether the current calibration session has been abandoned due to a misreported barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenCalibrationData">
            <summary>
              The calibration data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenSystemCapabilities">
            <summary>
              The system capabilities.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenInformation">
            <summary>
              The collection of calibration information.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenWarnings">
            <summary>
              The collection of calibration warnings.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenErrors">
            <summary>
              The collection or calibration errors.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataBarcodeData">
            <summary>
              The current barcode data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataKey">
            <summary>
              The dead key currently being calibrated. Null indicates baseline calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataValue">
            <summary>
              The expected character for the current dead key being calibrated.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataCalibrationsRemaining">
            <summary>
              A count of the estimated number of calibrations that still need to be performed during this session.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataSmallBarcodeSequenceIndex">
            <summary>
              The index of the current small barcode in a sequence.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataSmallBarcodeSequenceCount">
            <summary>
              The number of small barcodes for the current calibration data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataPrefix">
            <summary>
              The prefix for each small barcode in a sequence.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataSuffix">
            <summary>
              The detected suffix.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenDataReportedCharacters">
            <summary>
              The reported characters for the current calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataScannerDeadKeysMap">
            <summary>
              A dictionary of differences in expected qnd reported characters where the barcode scanner keyboard layout uses dead keys.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataScannerUnassignedKeys">
            <summary>
              A list of expected characters where the barcode scanner keyboard layout key maps to an unassigned key on the computer keyboard layout.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataLigatureMap">
            <summary>
              A dictionary of candidate ligatures.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataDeadKeysMap">
            <summary>
              A dictionary of differences in reported and expected characters where the reported data uses dead keys.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenReportedPrefixSegment">
            <summary>
              The reported prefix segment for the current calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenReportedSuffix">
            <summary>
              The reported suffix characters for the current calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataAimFlagCharacterSequence">
            <summary>
              The first (flag) character. By default, this is "]".
              If a dead key is used, the sequence will contain two characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataReportedCharacters">
            <summary>
              A regular expression for matching reported characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataPrefix">
            <summary>
              Any prefix observed during calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataCode">
            <summary>
              Any code observed during calibration between the AIM ID (if present) and the data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataSuffix">
            <summary>
              Any suffix observed during calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataReportedPrefix">
            <summary>
              Any prefix observed during calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataReportedCode">
            <summary>
              Any code observed during calibration between the AIM ID (if present) and the data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataReportedSuffix">
            <summary>
              Any suffix observed during calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataKeyboardScript">
            <summary>
              The Unicode name of the keyboard script.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataLineFeedCharacter">
            <summary>
              The control character that maps tp the Line Feed character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataScannerKeyboardPerformance">
            <summary>
              'Traffic Light' assessment of the performance of the barcode scanner keyboard input.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataCharacterMap">
            <summary>
              A dictionary of differences in reported and expected characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataDeadKeyCharacterMap">
            <summary>
              A dictionary of initially detected differences in reported and expected characters where the reported data uses
              dead keys.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataDeadKeyFixUp">
            <summary>
              A dictionary of fix ups required where the reported data uses dead keys, but where, when a dead key is entered followed
              by a space, the reported character is not the dead key character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataPotentialIsoIec15434Unreadable30">
            <summary>
              Indicates whether an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 30 character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataPotentialIsoIec15434EdiUnreadableFs">
            <summary>
              Indicates whether EDI data in an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 28 character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataPotentialIsoIec15434EdiUnreadableUs">
            <summary>
              Indicates whether EDI data in an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 31 character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenSmallBarcodeSuffixData">
            <summary>
            Any suffix and end-of-line sequence recorded while processing small barcodes.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._lastToken">
            <summary>
            The last token. This value is recorded to aid recovery from failures.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator._tokenExtendedDataUnrecognisedKeys">
            <summary>
              A list of characters that are not recognised by the barcode scanner keyboard layout.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Assumption)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator" /> class.
            </summary>
            <param name="assumption">The assumption made concerning the use of calibration in client systems.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Data,Solidsoft.Reply.BarcodeScanner.Calibration.Assumption)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator" /> class.
            </summary>
            <param name="calibrationData">The calibration data.</param>
            <param name="assumption">The assumption made concerning the use of calibration in client systems.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CurrentBarcodeType">
            <summary>
              Gets the type of calibration barcode currently being processed.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CalibrationData">
            <summary>
              Gets or sets the Calibration configuration data.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AssessFormatSupport">
            <summary>
              Gets or sets a value indicating whether to assess Format nn support.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.IsProcessingRequired">
            <summary>
              Gets a value indicating whether pre-processing of barcode scanner input is required.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.RecognisedDataElements">
            <summary>
            Gets or sets a collection of recognised data elements.
            </summary>
            <remarks>
            Optionally pass a list of recognised data elements to the Calibrator to constrain the GS1 application identifiers
            and/or the ASC MH 10.8.2 data identifiers that the client software needs to recognise whe parsing data. This may
            /extend the range of transformation strategies that the calibrator can identify.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SetReportedPrefix(System.String)">
            <summary>
              Sets the reported prefix that the barcode scanner is expected to include when barcodes are
              scanned.
            </summary>
            <remarks>
            <p>This method is only intended for use when a barcode scanner used for calibration is
              configured to transmit a prefix and the prefix characters contain two or more
              consecutive spaces. Because space characters are used as delimiters in the calibration
              barcodes, a prefix that contains spaces may result in incorrect data recognition during
              calibration, unless you set the prefix value explicitly using this method. You must
              state the prefix, as reported to the library. This may depend on your current computer
              keyboard layout, and may not be identical to the prefix characters programmed into the
              barcode scanner.</p>
            <p>There is no equivalent requirement to state values of suffixes that are reported with
              spaces. The calibrator will correctly handle such suffixes.</p>
            </remarks>
            <param name="reportedPrefix">The expected value of the reported prefix.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SystemCapabilities(System.Nullable{System.Boolean})">
            <summary>
              Returns the system capabilities for the current calibration.
            </summary>
            <param name="capsLock">
              Optional. Indicates if the keyboard Caps Lock was on or off when calibration was carried out.
            </param>
            <returns>The system capabilities for the current calibration.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BaselineBarcodes(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get the baseline calibration barcode(s) for the current calibration.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A list of baseline calibration barcodes for the current calibration.
            </returns>
            <remarks>
              If multiple streams are returned, each stream is a barcode containing a segment of the
              calibration data. Multiple streams are returned when smaller barcode sizes are required.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BaselineBarcodesSvg(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get the baseline calibration barcode(s) in SVG format for the current calibration.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A list of baseline calibration barcodes for the current calibration.
            </returns>
            <remarks>
              If multiple strings are returned, each string is a barcode containing a segment of the
              calibration data. Multiple strings are returned when smaller barcode sizes are required.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BaselineBarcodeData(Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get the data for each baseline calibration barcode for the current calibration.
            </summary>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A list of data entries for baseline calibration barcodes for the current calibration.
            </returns>
            <remarks>
              <p>If multiple strings are returned, each string is the data for a barcode containing a segment of
              the calibration data. Multiple strings are returned when smaller barcode sizes are required.</p>
              <p>This method is useful when the client code creates barcodes directly itself, rather than
              depending on the Calibration library.</p>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.Calibrate(System.Int32[],Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.TimeSpan,Solidsoft.Reply.BarcodeScanner.Calibration.Preprocessor,System.Boolean)">
            <summary>
              Calibrates for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <param name="data">The reported input after scanning the calibration barcode.</param>
            <param name="token">The current calibration token.</param>
            <param name="capsLock">Indicates if Caps Lock is switched on.</param>
            <param name="platform">The platform on which the system resides.</param>
            <param name="dataEntryTimeSpan">The time span specifying how long it took from the start of the scan to submitting the data.</param>
            <param name="preProcessors">The pre-processor functions, provided as a delegate.</param>
            <param name="trace">Indicates whether the calibrator should trace the data it receives. This supports debugging.</param>
            <returns>The updated calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.Calibrate(System.String,Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.TimeSpan,Solidsoft.Reply.BarcodeScanner.Calibration.Preprocessor,System.Boolean)">
            <summary>
              Calibrates for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <param name="data">The reported input after scanning the calibration barcode.</param>
            <param name="token">The current calibration token.</param>
            <param name="capsLock">Indicates if Caps Lock is switched on.</param>
            <param name="platform">The platform on which the system resides.</param>
            <param name="dataEntryTimeSpan">The time span specifying how long it took from the start of the scan to submitting the data.</param>
            <param name="preProcessors">The pre-processor functions, provided as a delegate.</param>
            <param name="trace">Indicates whether the calibrator should trace the data it receives. This supports debugging.</param>
            <returns>The updated calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CalibrationTokens(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size,System.String,System.String)">
            <summary>
              A collection of calibration tokens.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <param name="backgroundColour">Background colour (hex - use #nnnnnn format).</param>
            <param name="foregroundColour">Foreground colour (hex - use #nnnnnn format).</param>
            <returns>The collection of calibration tokens.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CalibrationTokens(System.Boolean,System.Boolean,System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size,System.String,System.String)">
            <summary>
              A collection of calibration tokens.
            </summary>
            <param name="generateImages">Indicates whether the library should generate barcode images.</param>
            <param name="generateSvg">Indicates whether the library should generate SVG content.</param>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of any data matrix generated by other means.</param>
            <param name="backgroundColour">Background colour (hex - use #nnnnnn format).</param>
            <param name="foregroundColour">Foreground colour (hex - use #nnnnnn format).</param>
            <returns>The collection of calibration tokens.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SupplementalBarcodes(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get a dictionary of supplementary calibration barcodes for the current calibration.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A dictionary of calibration barcodes for the current calibration.
            </returns>
            <remarks>
              The values represent additional barcodes used to calibrate for dead keys on the computer
              keyboard. The dictionary key for these additional barcodes is the dead key character.
              Each value in the dictionary is a list of one or more streams. If multiple streams are
              returned, each stream is a barcode containing a segment of the calibration data.
              Multiple streams are returned when smaller barcode sizes are required. The full
              list of barcode streams is only available once the baseline barcode has been scanned and
              the data has been processed.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SupplementalBarcodesSvg(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get a dictionary of supplementary calibration barcodes for the current calibration.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A dictionary of calibration barcodes for the current calibration.
            </returns>
            <remarks>
              The values represent additional barcodes used to calibrate for dead keys on the computer
              keyboard. The dictionary key for these additional barcodes is the dead key character.
              Each value in the dictionary is a list of one or more streams. If multiple streams are
              returned, each stream is a barcode containing a segment of the calibration data.
              Multiple streams are returned when smaller barcode sizes are required. The full
              list of barcode streams is only available once the baseline barcode has been scanned and
              the data has been processed.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SupplementalBarcodeData(Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get a dictionary of data for supplementary calibration barcodes for the current calibration.
            </summary>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A dictionary of calibration barcodes for the current calibration.
            </returns>
            <remarks>
              <p>The data values represent additional barcodes used to calibrate for dead keys on the computer
              keyboard. The dictionary key for these additional barcodes is the dead key character. Each
              value in the dictionary is a list of one or more strings. If multiple strings are returned,
              each string is the data for a barcode containing a segment of the calibration data. Multiple
              strings are returned when smaller barcode sizes are required. The full list of barcode
              strings is only available once the baseline barcodes have been scanned and the data has been
              processed.</p>
              <p>This method is useful when the client code creates barcodes directly itself, rather than
              depending on the Calibration library.</p>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ProcessInput(System.String,System.Collections.Generic.IList{Solidsoft.Reply.Parsers.Common.PreprocessorException}@)">
            <summary>
              Processes input, normalizing it according the calibration character map, converting into
              the correct sequence of characters.
            </summary>
            <param name="input">
              The input to be processed. This is data transmitted by the barcode scanner, as reported to
              the application.
            </param>
            <param name="exceptions">Collection of exceptions.</param>
            <returns>The normalized input, processed according to the calibration character map.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.NextCalibrationToken(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Return the next calibration token.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>The next calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.NextCalibrationToken(System.Boolean,Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Return the next calibration token.
            </summary>
            <param name="generateImages">Indicates whether the library should generate barcode images.</param>
            <param name="token">The current calibration token.</param>
            <returns>The next calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AimIdentifierMatchRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;prefix&gt;.*)(?&lt;characters&gt;][A-Za-z][1-9A-Za-z])(?&lt;code&gt;.*)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "prefix" capture group.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ "characters" capture group.<br/>
                ○ Match ']'.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
                ○ Match a character in the set [1-9A-Za-z].<br/>
            ○ "code" capture group.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AimIdentifierUnrecognisedFlagMatchRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;prefix&gt;.*)(?&lt;characters&gt;\\u0000[A-Za-z][1-9A-Za-z])(?&lt;code&gt;.*)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "prefix" capture group.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ "characters" capture group.<br/>
                ○ Match '\0'.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
                ○ Match a character in the set [1-9A-Za-z].<br/>
            ○ "code" capture group.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.InvariantsMatchRegex">
            <remarks>
            Pattern:<br/>
            <code>^[-!"%&amp;'()*+,./0-9:;&lt;=&gt;?A-Z_a-z]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [!"%-?A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DeadKeyAsciiControlCharacterSequenceRegex">
            <remarks>
            Pattern:<br/>
            <code>\\u0000(\\u0000*\\u0004)([^\\u0000\\u0020\\u0040])$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '\0'.<br/>
            ○ 1st capture group.<br/>
                ○ Match '\0' atomically any number of times.<br/>
                ○ Match '\u0004'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character in the set [^\0 @].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DeadKeysRegex">
            <remarks>
            Pattern:<br/>
            <code>\\0.</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '\0'.<br/>
            ○ Match any character other than '\n'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.Case1TempSpaceHolderRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;a&gt;\\u0000[^\\u0020])\\u0020(?=[^\\u0020])</code><br/>
            Explanation:<br/>
            <code>
            ○ "a" capture group.<br/>
                ○ Match '\0'.<br/>
                ○ Match any character other than ' '.<br/>
            ○ Match ' '.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than ' '.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.Case2TempSpaceHolderRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;a&gt;\\u0000[^\\u0020]{0,2})\\u0020{4}</code><br/>
            Explanation:<br/>
            <code>
            ○ "a" capture group.<br/>
                ○ Match '\0'.<br/>
                ○ Match a character other than ' ' atomically at most 2 times.<br/>
            ○ Match the string "    ".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.NonMatchingDeadKeyComputerKeyboardRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;a&gt;\\u0000[^\\u0020]+)\\u0020((?=[^\\u0020])|(?=(\\u0020){2}))</code><br/>
            Explanation:<br/>
            <code>
            ○ "a" capture group.<br/>
                ○ Match '\0'.<br/>
                ○ Match a character other than ' ' atomically at least once.<br/>
            ○ Match ' '.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match any character other than ' '.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Loop exactly 2 times.<br/>
                            ○ 2nd capture group.<br/>
                                ○ Match ' '.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ThreeSpaceTempSpaceHolderRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;c&gt;^|[^\\u0020])(?&lt;s&gt;\\u0020{3}){2,}?(?!\\u0020)</code><br/>
            Explanation:<br/>
            <code>
            ○ "c" capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match any character other than ' '.<br/>
            ○ Loop lazily at least twice.<br/>
                ○ "s" capture group.<br/>
                    ○ Match the string "   ".<br/>
            ○ Zero-width negative lookahead.<br/>
                ○ Match ' '.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.TwoSpaceTempSpaceHolderRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;c&gt;^|[^\\u0020])\\u0020{2}(?!\\u0020)</code><br/>
            Explanation:<br/>
            <code>
            ○ "c" capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match any character other than ' '.<br/>
            ○ Match the string "  ".<br/>
            ○ Zero-width negative lookahead.<br/>
                ○ Match ' '.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.UnassignedKeysRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\u0000\\u0020?$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '\0'.<br/>
            ○ Match ' ' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BarcodeScannerDeadKeysFilter1Regex">
            <remarks>
            Pattern:<br/>
            <code>(^|\\0)[^\\u0020]\\u0020$</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '\0'.<br/>
            ○ Match any character other than ' '.<br/>
            ○ Match ' '.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BarcodeScannerDeadKeysFilter2Regex">
            <remarks>
            Pattern:<br/>
            <code>^\\0[^\\u0020]\\u0020$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '\0'.<br/>
            ○ Match any character other than ' '.<br/>
            ○ Match ' '.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ChainedDeadKeysFilter2Regex">
            <remarks>
            Pattern:<br/>
            <code>\\u0000{2,}(\\w|[!"#$%&amp;'()*+,./:;&lt;=&gt;?@\\^_`{|}~-])</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '\0' atomically at least twice.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [!-/:-@^-`{-~\w].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SuffixRegex">
            <remarks>
            Pattern:<br/>
            <code>(([^\\s]\\s{4})|([^\\s]\\s{8})|([^\\s]\\s{12})|([^\\s]\\s{16})|([^\\s]\\s{19})|([^\\s]\\s{20}))(?!.*\\s{4})(?&lt;s&gt;\\s{0,3}.*)$</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 6 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [^\s].<br/>
                        ○ Match a whitespace character exactly 4 times.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [^\s].<br/>
                        ○ Match a whitespace character exactly 8 times.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match a character in the set [^\s].<br/>
                        ○ Match a whitespace character exactly 12 times.<br/>
                    ○ 5th capture group.<br/>
                        ○ Match a character in the set [^\s].<br/>
                        ○ Match a whitespace character exactly 16 times.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match a character in the set [^\s].<br/>
                        ○ Match a whitespace character exactly 19 times.<br/>
                    ○ 7th capture group.<br/>
                        ○ Match a character in the set [^\s].<br/>
                        ○ Match a whitespace character exactly 20 times.<br/>
            ○ Zero-width negative lookahead.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
                ○ Match a whitespace character exactly 4 times.<br/>
            ○ "s" capture group.<br/>
                ○ Match a whitespace character greedily at most 3 times.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.AllSpaces">
            <remarks>
            Pattern:<br/>
            <code>[^ ]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match any character other than ' '.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.PrefixRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;prefix&gt;.*?)(?=\\u0020\\u0020[^\\u0020]).*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "prefix" capture group.<br/>
                ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match the string "  ".<br/>
                ○ Match any character other than ' '.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BarcodePrefix(System.String)">
            <summary>
              Calculate the length of any prefix.
            </summary>
            <param name="data">The reported barcode data.</param>
            <returns>The length of the prefix.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetectSuffixAndStripRepeats(System.String,System.String,System.String)">
            <summary>
            Removes repeated suffixes from reported data.  This is relevant when small barcode processing
            is used. This is a best-endeavours approach that assumes that the suffix does not contain
            any sequence of four or more spaces.
            </summary>
            <param name="data">The reported data.</param>
            <param name="knownSuffix">A suffix, if already known.</param>
            <param name="knownEndOfLine">An end-of-line sequence, if known.</param>
            <returns>The reported data with any internal suffixes stripped out, together with the suffix and end-of-line terminator.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.StdDevForRepeatingCharacters(System.String,System.Char,System.Double,System.Int32@,System.Boolean)">
            <summary>
              Calculates the standard deviation of the intervals between repeating characters
              (e.g., space, ASCII 0) in a calibration barcode using a hypothetical mean.
            </summary>
            <param name="data">The data contained in a barcode.</param>
            <param name="character">The repeating character.</param>
            <param name="hypotheticalMean">The theoretical mean for the barcode type.</param>
            <param name="count">The count f the number of repeating characters detected.</param>
            <param name="countCharacter">Indicates if the code should count occurrences of the character parameter, or count other characters.</param>
            <returns>The standard deviation of the intervals between repeating characters.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetectSequenceTypes(System.Collections.Generic.IList{System.String},System.Collections.Generic.List{System.String},System.Char)">
            <summary>
              Detect sequence types.
            </summary>
            <param name="characters">A list of character sequences.</param>
            <param name="reportedCharacters">A list to which the reported characters will be added.</param>
            <param name="tempSpaceCharacter">The temporary space character.</param>
            <returns>True, if the correct number of character sequences are selected; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ResolveKeyboardScript(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
              Resolves the reported segment characters to a Unicode block representing the script of the
              OS-configured keyboard layout.
            </summary>
            <param name="segmentCharacters">The characters in the segment of reported characters.</param>
            <param name="capsLockIndicator">Indicates if the caps lock may be switched on.</param>
            <returns>
              The name of the Unicode block representing the script of the OS-configured keyboard layout.
            </returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.SplitSequence(System.String)">
            <summary>
              Splits a sequence of reported characters where the sequence contains multiple entries.
            </summary>
            <param name="sequence">The sequence to be split.</param>
            <returns>A list of sequences.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.GetCalibrationTokens(System.Boolean,System.Boolean,System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size,System.String,System.String)">
            <summary>
              A collection of calibration tokens.
            </summary>
            <param name="generateImages">Indicates whether the library should generate barcode images.</param>
            <param name="generateSvg">Indicates whether the library should generate SVG content.</param>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <param name="backgroundColour">Background colour (hex - use #nnnnnn format).</param>
            <param name="foregroundColour">Foreground colour (hex - use #nnnnnn format).</param>
            <returns>The collection of calibration tokens.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.NextCalibrationToken(System.Boolean,Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Return the next calibration token.
            </summary>
            <param name="generateImages">Indicates whether the library should generate barcode images.</param>
            <param name="token">The current calibration token.</param>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>The next calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CalibrateBaseLine(System.String,Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.TimeSpan)">
            <summary>
              Calibrates for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <param name="data">
              The reported input after scanning the calibration barcode.
            </param>
            <param name="token">The current calibration token.</param>
            <param name="capsLock">Indicates if Caps Lock is switched on.</param>
            <param name="platform">The platform on which the system resides.</param>
            <param name="dataEntryTimeSpan">
              The time span specifying how long it took from the start of the scan to
              submitting the data.
            </param>
            <returns>The calibration token together with any suffix and end-of-line data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CalibrateDeadKey(System.String,Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.TimeSpan,System.String,System.String)">
            <summary>
              Calibrates for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <param name="data">The reported input after scanning the calibration barcode.</param>
            <param name="token">The current calibration token.</param>
            <param name="dataEntryTimeSpan">The time span specifying how long it took from the start of the scan to submitting the data.</param>
            <param name="suffix">A known suffix, discovered during. </param>
            <param name="endOfLine">The end-of-line character sequence.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ConvertToSegments(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.String,System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{System.String}},System.Collections.Generic.List{System.Collections.Generic.List{System.String}}@,System.Char@)">
            <summary>
              Converts a data string containing the reported contents of the baseline barcode to a list of segments, each
              containing a list of character sequences.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="data">The reported contents of the baseline barcode.</param>
            <param name="expectedSegments">The expected segments of character sequences.</param>
            <param name="reportedSegments">The reported segments of character sequences.</param>
            <param name="lineFeedChar">The reported character deemed to map to an LF character.</param>
            <returns>The amended calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ProcessReportedSegments(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IList{System.Collections.Generic.List{System.String}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{System.String}},System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform)">
            <summary>
              Process the segments of reported data.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="reportedSegments">The list of segments of reported sequences.</param>
            <param name="expectedSegments">The list of segments fo expected sequences.</param>
            <param name="capsLock">Optional reported Caps Lock state.</param>
            <param name="platform">Operating system platform.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ProcessDeadKeyReportedCharacterList(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
              Process the reported character sequences for a DeadKey barcode.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="reportedCharacterList">The reported character sequences.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetermineIfFormat0605UnreadableWhenNoAscii30(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.String,System.String)">
            <summary>
              Determine if a Format 05 or 06 barcode is unreadable when
              the scanner does not report an ASCII 30.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="reportedCharacterSequence">A reported character sequence.</param>
            <param name="expectedCharacter">The expected character.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetermineIfEdiUnreadableWhenNoAscii28Or31(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.String,System.String)">
            <summary>
              Determine if EDI barcodes are unreadable when the scanner does not report an
              ASCII 28 or an ASCII 31.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="reportedCharacterSequence">A reported character sequence.</param>
            <param name="expectedCharacter">The expected character.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ProcessDeadKeys">
            <summary>
              Process the dead keys detected during the baseline test.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ResolveUnspecifiedKeyboardMismatches(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
            Resolve the warnings information for situations where we know there is a keyboard layout mismatch, but
            we don't know if this affects invariant or non-invariant characters.  This can specifically happen
            where keys on the barcode scanner keyboard layout map to dead keys on the computer keyboard layout, but
            no other mismatches are detected.
            </summary>
            <param name="token">The current calibration token.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CreateDeduplicatedCharacterMap(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Char,System.Char}})">
            <summary>
              Create a de-duplicated character mapping.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="selectedCharacterKeyValuePairs">
              A collection of dictionary entries for all processed characters.
            </param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoDetermineIfKeyboardsMatch(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics)">
            <summary>
              Determine if the scanner and operating system keyboard layouts match.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="caseConversionCharacteristics">
              The case conversion characteristics of the system based on observations.
            </param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.InferCaseConversionCapsLockOn(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics,Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform)">
            <summary>
              Infer the case conversion characteristics of the scanner when CAPS LOCK
              is reported as being on.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="caseConversionCharacteristics">The case conversion characteristics.</param>
            <param name="platform">The operating system platform.</param>
            <returns>The calibration token, populated to inferred information.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.InferCaseConversionCapsLockOffOrUnknown(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics,Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.Nullable{System.Boolean},System.Func{Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{Solidsoft.Reply.BarcodeScanner.Calibration.Token}})">
            <summary>
              Infer the case conversion characteristics of the scanner when CAPS LOCK
              is reported as being on.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="caseConversionCharacteristics">The case conversion characteristics.</param>
            <param name="platform">The operating system platform.</param>
            <param name="capsLock">The CAPS LOCK indicator. This is either false or null.</param>
            <param name="setCapLockWarningAndIndicator">
              A function that sets the CAPS LOCK indicator as well as a warning message.
            </param>
            <returns>The calibration token, populated to inferred information.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetermineBarcodeProvenance(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.String,System.Boolean@)">
            <summary>
              Determine if the user has scanned the correct baseline barcode and if it is fully or
              partially reported.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="data">The reported calibration data.</param>
            <param name="returnImmediately">
              Indicates if the calibrator should return immediately on error.
            </param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.BarcodeProvenance(System.String,System.Boolean)">
            <summary>
              Assesses the likely provenance of the calibration barcode. By 'provenance' we mean a check on
              whether the barcode appears to be a genuine calibration barcode.
            </summary>
            <param name="data">The reported barcode data.</param>
            <param name="isDeadKey">If true, the barcode data should be for a deadkey barcode; otherwise it should be for a baseline barcode.</param>
            <returns>A provenance value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.FixUpExpectedReportedPrefix(System.Collections.Generic.List{System.String},System.Char)">
            <summary>
              Fix up the segments in the case where an expected reported prefix has been specified.
            </summary>
            <param name="segments">The segments.</param>
            <param name="tempSpaceHolder">The temporary space holder character.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.CreateDeadKeyCalibration(System.Char)">
            <summary>
              Returns the barcode data for a dead key calibration barcode.
            </summary>
            <param name="value">The dead key.</param>
            <returns>The barcode data for a dead key calibration barcode.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetectCharacterIssues(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IList{System.Collections.Generic.List{System.String}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{System.String}},System.Int32,System.Boolean)">
            <summary>
              Detects various types of character issues in an unprocessed segment.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="reportedSegments">The reported segments of character sequences contained in the baseline barcode.</param>
            <param name="expectedSegments">The actual segments of character sequences contained in the baseline barcode.</param>
            <param name="reportedSegmentsIndex">The index of the reported segment.</param>
            <param name="invariant">True, if the segment represents invariant characters; otherwise false.</param>
            <returns>The amended calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetectDifferences(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.IDictionary{System.Char,System.Char}@)">
            <summary>
              Detect any difference in the reported and expected strings.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="reportedPrintables">The list of reported printables.</param>
            <param name="expectedPrintables">The list of expected printables.</param>
            <param name="invariant">Indicates whether the invariant character set is being processed.</param>
            <param name="differences">A dictionary of processed state.</param>
            <returns>The amended calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DetectUnrecognisedOrComplexCharacters(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IList{System.String}},System.Boolean)">
            <summary>
              Detect unrecognised characters, chained dead key characters, dead key sequences and ligatures.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="segment">A list of sequences within a segment.</param>
            <param name="expectedSegment">A list of the expected sequences within a segment.</param>
            <param name="chainedSequences">A dictionary of chained dead key sequences. This is populated by this procedure.</param>
            <param name="splitSequences">
              A dictionary of split sequences. These generally represent dead key sequences followed by
              a normal sequence.
            </param>
            <param name="invariant">True, if the segment represents invariant characters; otherwise false.</param>
            <returns>The amended calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.FixDeadKeyAsciiControlCharacterSequence(System.String)">
            <summary>
              Fix up any sequence in which a dead key is followed by one or more ASCII control characters.
            </summary>
            <param name="input">
              The input to be processed.
            </param>
            <returns>The fixed-up input.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ExpectedSegments">
            <summary>
              Return a list of expected segments of character sequences. They represent the characters in the baseline barcode.
            </summary>
            <returns>The list of expected segments of character sequences.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoInitializeFromTokenData(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Initializes the keyboard calibrator from extended data stored in the calibration token.
            </summary>
            <param name="token">The calibration token.</param>
            <returns>The updated calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.InitializeTokenData">
            <summary>
              Initializes the extended token data in the calibration token.
            </summary>
            <returns>Returns the token with initialized extended data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.LogCalibrationInformation(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.InformationType,System.String,System.String)">
            <summary>
              Log the calibration information.
            </summary>
            <param name="token">The current token.</param>
            <param name="type">The information type.</param>
            <param name="reportedData">The reported character(s).</param>
            <param name="expectedData">The expected character(s).</param>
            <returns>The calibration token with logged information.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ProcessReportedLogData(Solidsoft.Reply.BarcodeScanner.Calibration.InformationType,System.String,System.String)">
            <summary>
            Process the reported data when logging calibration information.
            </summary>
            <param name="type">The calibration information type.</param>
            <param name="reportedData">The reported character sequence.</param>
            <param name="expectedData">The expected character sequences.</param>
            <remarks>
              This method assumes that the space is a delimiter between different expected character
              sequences and not part of a character sequence.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.PreProcessAimIdentifier(System.String)">
            <summary>
              Pre-processes the AIM identifier, if it exists. It may be necessary to pre-process the identifier
              to ensure it is recognised before processing the rest of the input.
            </summary>
            <param name="input">The data transmitted by a barcode scanner.</param>
            <returns>The pre-processed AIM identifier, if an AIM identifier was reported.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoProcessAimCandidate(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Process any AIM candidate according to the character map.
            </summary>
            <param name="token">The current calibration token.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoProcessSuffix(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.String)">
            <summary>
              Process a suffix according to the character map.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="reportedSuffix">The reported suffix character sequence.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ProcessReportedPrefix(System.String,System.ValueTuple{System.String,System.String,System.String}@,System.ValueTuple{System.String,System.String,System.String}@,System.Boolean@)">
            <summary>
              Processes prefix data, normalizing it according the calibration character map,
              converting into the correct sequence of characters. This method also returned parsed data for
              any prefix, AIM ID and additional code or label.
            </summary>
            <param name="aimIdentifier">
              The prefix data to be processed. This is data transmitted by the barcode scanner, as reported to
              the application.
            </param>
            <param name="rawData">Raw data broken into prefix, AI and code.</param>
            <param name="normalisedData">Normalised data broken into prefix, AI and code.</param>
            <param name="aimIdUncertain">Indicates whether the AIM ID is uncertain (best endeavours).</param>
            <returns>A normalized string containing the processed prefix data.  The string is processed according
            to the calibration character map.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoProcessAsciiControlCharacters(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IList{System.Collections.Generic.List{System.String}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{System.String}})">
            <summary>
              Process the reported ASCII control characters to determine any issues.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="reportedSegments">The reported segments of character sequences.</param>
            <param name="expectedSegments">The list of segments for expected characters.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoProcessForIsoIec15434MessageHeaderIncompatibility(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Process the input for any incompatibility with the ISO/IEC 15434 message header.
            </summary>
            <param name="token">The current calibration token.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoProcessForIsoIec15434EdiIncompatibility(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Process the input for any incompatibility with the ISO/IEC 15434 EDI barcodes.
            </summary>
            <param name="token">The current calibration token.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.DoProcessMissedAmbiguities(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Process the input for any ambiguities which have been missed by previous processing.
            </summary>
            <param name="token">The current calibration token.</param>
            <returns>The calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.ResetStateForBaselineCalibration">
            <summary>
            Resets state for baseline calibration.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator.TryInSmallBarcodeSequence(System.String@,Solidsoft.Reply.BarcodeScanner.Calibration.Token@)">
            <summary>
            Tests if we are currently processing a small barcode sequence, but not yet at the last barcode.
            </summary>
            <param name="data">The reported data currently being processed.</param>
            <param name="token">The current token.</param>
            <returns>True, if currently processing a small barcode sequence, but not yet at the last barcode; otherwise false.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics">
            <summary>
              Computes the case conversion characteristics of the system based on observations.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics._segmentCharacters">
            <summary>
              A list of segment characters.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Nullable{System.Boolean})">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics"/> class.
            </summary>
            <param name="segmentCharacters">
              The characters in the segment of reported characters.
            </param>
            <param name="keyboardScript">
              The Unicode block name for the script represented by the OS-configured keyboard layout.
            </param>
            <param name="capsLockState">The reported Caps Lock state.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.UpperCaseConversionDetected">
            <summary>
              Gets a value indicating whether conversion of lower-case characters to upper case has been detected.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.LowerCaseConversionDetected">
            <summary>
              Gets a value indicating whether conversion of upper-case characters to lower case has been detected.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.CapsLockState">
            <summary>
              Gets a value indicating whether Caps Lock is on or off, as reported by the client.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.CapsLockIndicator">
            <summary>
              Gets a value indicating whether Caps Lock appears to be on according to heuristic analysis.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.KeyboardScript">
            <summary>
              Gets the Unicode block name for the script represented by the OS-configured keyboard layout.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CaseConversionCharacteristics.IsCapsLockProbablyOn">
            <summary>
              Tests to see if CAPS LOCK is probably on. CAPS LOCK generally only affects the case of
              characters generated for scripts derived from the Latin script. However, on some
              keyboards, CAPS LOCK may be used to switch script - e.g., a Hebrew keyboard will use
              CAPS LOCK to output Latin capitals.
            </summary>
            <returns>True, if CAPS LOCK is probably on; otherwise false.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterCategory">
            <summary>
            The category of the character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterCategory.None">
            <summary>
              The character is not categorised.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterCategory.Ascii">
            <summary>
            The character is an ASCII character
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterCategory.Invariant">
            <summary>
              The character is an invariant character (ISO 646).
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterCategory.Control">
            <summary>
              The expected character is a control character.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping">
            <summary>
              Represents a calibration mapping from an expected character to a reported character.
            </summary>
            <param name="Expected">Gets the expected character.</param>
            <param name="Reported">Gets the reported character sequence.</param>
            <param name="ExpectedCharacterCategory">Gets the category of the expected character in a character mapping.</param>
            <param name="DeadKey">Gets a value indicating whether the reported character is a dead key.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping.#ctor(System.Char,System.String,Solidsoft.Reply.BarcodeScanner.Calibration.CharacterCategory,System.Boolean)">
            <summary>
              Represents a calibration mapping from an expected character to a reported character.
            </summary>
            <param name="Expected">Gets the expected character.</param>
            <param name="Reported">Gets the reported character sequence.</param>
            <param name="ExpectedCharacterCategory">Gets the category of the expected character in a character mapping.</param>
            <param name="DeadKey">Gets a value indicating whether the reported character is a dead key.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping.Expected">
            <summary>Gets the expected character.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping.Reported">
            <summary>Gets the reported character sequence.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping.ExpectedCharacterCategory">
            <summary>Gets the category of the expected character in a character mapping.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping.DeadKey">
            <summary>Gets a value indicating whether the reported character is a dead key.</summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ConditionSeverity">
            <summary>
              The severity of a condition for which advice is provided.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ConditionSeverity.None">
            <summary>
            <p>No severity specified.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ConditionSeverity.Low">
            <summary>
              Low severity - green.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ConditionSeverity.Medium">
            <summary>
              Medium severity - amber.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ConditionSeverity.High">
            <summary>
              High severity - red.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Data">
            <summary>
              Calibration maps and data.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Data" /> class.
            </summary>
            <param name="json">
              The calibration JSON.
            </param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.#ctor(System.String,System.Collections.Generic.IDictionary{System.Char,System.Char},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.String,Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Data" /> class.
            </summary>
            <param name="aimFlagCharacterSequence">
              The first (flag) character of an AIM identifier. By default, this is "]".
              If a dead key is used, the sequence will contain two characters.
            </param>
            <param name="characterMap">
              A dictionary of differences in reported and expected characters.
            </param>
            <param name="deadKeysMap">
              A dictionary of differences in reported and expected characters where the reported data uses dead keys.
            </param>
            <param name="deadKeyCharacterMap">
              A dictionary of the dead key characters detected during baseline calibration.
            </param>
            <param name="ligatureMap">
              A dictionary of the ligature sequences detected during baseline calibration.
            </param>
            <param name="scannerDeadKeysMap">
              A dictionary of differences in reported and expected characters where the scanner keyboard layout uses dead keys.
            </param>
            <param name="scannerUnassignedKeys">
              A list of expected characters where the scanner keyboard layout key maps to an unassigned key on the computer
              keyboard layout.
            </param>
            <param name="reportedCharacters">
              A regular expression for matching reported characters.
            </param>
            <param name="reportedPrefix">
              Any prefix reported during calibration.
            </param>
            <param name="reportedCode">
              Any code between the AIM ID (if present) and the reported data reported during calibration.
            </param>
            <param name="reportedSuffix">
              Any suffix reported during calibration.
            </param>
            <param name="keyboardScript">
              The Unicode name of the keyboard script.
            </param>
            <param name="scannerKeyboardPerformance">
              'Traffic Light' assessment of the performance of the barcode scanner keyboard input.
            </param>
            <param name="lineFeedCharacter">
              The control character that naps to the line feed character.
            </param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.AimFlagCharacterSequence">
            <summary>
              Gets the first (flag) character of an AIM identifier. By default, this is "]".
              If a dead key is used, the sequence will contain two characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.CharacterMap">
            <summary>
              Gets a dictionary of differences in reported and expected characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.DeadKeysMap">
            <summary>
              Gets a dictionary of differences in reported and expected characters where the reported data uses dead keys.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.DeadKeyCharacterMap">
            <summary>
              Gets a dictionary of the dead key characters detected during baseline calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ScannerDeadKeysMap">
            <summary>
              Gets a dictionary of differences in reported and expected characters where the scanner keyboard layout uses dead
              keys.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ScannerUnassignedKeys">
            <summary>
              Gets a list of expected characters where the scanner keyboard layout key maps to an unassigned key on the computer
              keyboard layout.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.LigatureMap">
            <summary>
              Gets a dictionary of reported ligature sequences and corresponding expected characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ReportedCharacters">
            <summary>
              Gets a regular expression for matching reported characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ReportedPrefix">
            <summary>
              Gets any prefix reported during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ReportedCode">
            <summary>
              Gets any code between the AIM ID (id present) and the data reported during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ReportedSuffix">
            <summary>
              Gets any suffix reported during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.KeyboardScript">
            <summary>
              Gets the Unicode name of the keyboard script.
            </summary>
            <remarks>
              The library can only detect the keyboard script by heuristic analysis of the
              reported data. This value does not refer t the keyboard layout, but rather
              to the characters that the keyboard predominantly represents.
            </remarks>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ScannerKeyboardPerformance">
            <summary>
              Gets the current 'Traffic Light' assessment of the performance of the barcode scanner keyboard input.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.LineFeedCharacter">
            <summary>
              Gets the control character that maps to the line feed character. If \0,
              no LF mapping was detected.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Data.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.op_Equality(Solidsoft.Reply.BarcodeScanner.Calibration.Data,Solidsoft.Reply.BarcodeScanner.Calibration.Data)">
            <summary>
              Override for the equality operator.
            </summary>
            <param name="calibrationData1">The first calibration data.</param>
            <param name="data2">The second calibration data.</param>
            <returns>True, if the calibration data are equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.op_Inequality(Solidsoft.Reply.BarcodeScanner.Calibration.Data,Solidsoft.Reply.BarcodeScanner.Calibration.Data)">
            <summary>
              Override for the inequality operator.
            </summary>
            <param name="data1">The first calibration data.</param>
            <param name="data2">The second calibration data.</param>
            <returns>True, if the calibration data are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.FromJson(System.String)">
            <summary>
              Initializes the data from a JSON string representing the serialized data.
            </summary>
            <param name="json">A JSON string representing the serialized data.</param>
            <returns>The deserialised data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.Equals(Solidsoft.Reply.BarcodeScanner.Calibration.Data)">
            <summary>
              Indicates whether the current calibration data is equal to another calibration data object.
            </summary>
            <param name="other">A calibration data object to compare with this current calibration data object.</param>
            <returns>true if the current calibration data object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.Equals(System.Object)">
            <summary>
              Indicates whether the current calibration data is equal to another object.
            </summary>
            <param name="obj">An object to compare with this current calibration data object.</param>
            <returns>true if the current calibration data object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.GetHashCode">
            <summary>
              Returns a hash value for the current token.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ToString">
            <summary>
              Returns a JSON representation of the calibration data.
            </summary>
            <returns>A JSON representation of the calibration data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the calibration data.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Data.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
              Handles errors in serialization and deserialization.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataIgnoreEmptyEnumerableResolver">
            <summary>
              A JSON contract resolver. Ignores empty enumerable properties and fields on calibration data.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataIgnoreEmptyEnumerableResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
              Creates a JSON property with conditional serialization.
            </summary>
            <param name="member">The member that will be conditionally serialized.</param>
            <param name="memberSerialization">The member serialization options.</param>
            <returns>The newly-created JSON property.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode">
            <summary>
              Creates a data matrix EC200 barcode as a stream of image data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcodeLockObject">
            <summary>
              Used to lock when creating a barcode;.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode._disposed">
            <summary>
              Indicates whether Dispose already been called.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode._multiplier">
            <summary>
              Barcode module width multiplier.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode" /> class.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode" /> class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.ForegroundColor">
            <summary>
              Gets or sets the barcode foreground color.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.BackgroundColor">
            <summary>
              Gets or sets the barcode background color.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.ImageFormat">
            <summary>
              Gets or sets the image format.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.Multiplier">
            <summary>
              Gets or sets the size multiplier factor.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcode(System.String)">
            <summary>
              Creates a barcode and returns it as a readonly PNG stream.
            </summary>
            <param name="barcodeData">The barcode data. Encoded using Zint rules.</param>
            <returns>A stream containing PNG content.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcode(System.String,SixLabors.ImageSharp.Formats.IImageFormat)">
            <summary>
              Creates a barcode and returns it as a readonly stream.
            </summary>
            <param name="barcodeData">The barcode data. Encoded using Zint rules.</param>
            <param name="imageFormat">The image format.</param>
            <returns>A stream containing the image content.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcode(System.String,SixLabors.ImageSharp.Color,SixLabors.ImageSharp.Color)">
            <summary>
              Creates a barcode and returns it as a readonly stream.
            </summary>
            <param name="barcodeData">The barcode data. Encoded using ZXing rules.</param>
            <param name="backgroundColor">The background colour of the barcode.</param>
            <param name="foregroundColor">The foreground colour of the barcode.</param>
            <returns>A stream containing PNG content.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcode(System.String,SixLabors.ImageSharp.Color,SixLabors.ImageSharp.Color,SixLabors.ImageSharp.Formats.IImageFormat)">
            <summary>
              Creates a barcode and returns it as a readonly stream.
            </summary>
            <param name="barcodeData">The barcode data. Encoded using ZXing rules.</param>
            <param name="backgroundColor">The background colour of the barcode.</param>
            <param name="foregroundColor">The foreground colour of the barcode.</param>
            <param name="imageFormat">The image format.</param>
            <returns>A stream containing the image content.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcodeSvg(System.String)">
            <summary>
              Creates a barcode and returns it as SVG content.
            </summary>
            <param name="barcodeData">The barcode data. Encoded using ZXing rules.</param>
            <returns>A stream containing SVG content.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CreateBarcodeSvg(System.String,SixLabors.ImageSharp.Color,SixLabors.ImageSharp.Color)">
            <summary>
              Creates a barcode and returns it as SVG content.
            </summary>
            <param name="barcodeData">The barcode data. Encoded using ZXing rules.</param>
            <param name="backgroundColor">The background colour of the barcode.</param>
            <param name="foregroundColor">The foreground colour of the barcode.</param>
            <returns>A stream containing SVG content.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.Dispose">
            <summary>
              Public implementation of Dispose method for the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode"/> class.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.Dispose(System.Boolean)">
            <summary>
              Protected implementation of Dispose method for the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode"/> class.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed explicitly.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Barcode.CalculateDataMatrixModuleSize(System.String)">
            <summary>
              Calculate the Data Matrix module size.
            </summary>
            <param name="barcodeData">The barcode data.</param>
            <returns>The number of horizontal and vertical modules in the barcode.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Extensions">
            <summary>
              Extension methods for Data Matrix barcode processing.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Extensions.Contains(System.Text.StringBuilder,System.String)">
            <summary>
              Tests for a substring within the string builder.
            </summary>
            <param name="value">The string builder.</param>
            <param name="substring">The substring.</param>
            <returns>True, if the string builder contains the substring; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Extensions.MaxCapacity(Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Returns the maximum number of bytes that can be encoded in a Data Matrix barcode of a given size.
            </summary>
            <param name="size">The size of the Data Matrix barcode.</param>
            <returns>The maximum number of bytes that can be encoded in a Data Matrix barcode of the given size.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size">
            <summary>
              Enumeration of Data Matrix code symbol sizes.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Automatic">
            <summary>
              Automatic sizing.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm10X10">
            <summary>
              Data Matrix square 10x10.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm12X12">
            <summary>
              Data Matrix square 12x12.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm14X14">
            <summary>
              Data Matrix square 14 x 14.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm16X16">
            <summary>
              Data Matrix square 16 x 16.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm18X18">
            <summary>
              Data Matrix square 18 x 18.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm20X20">
            <summary>
              Data Matrix square 20 x 20.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm22X22">
            <summary>
              Data Matrix square 22 x 22.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm24X24">
            <summary>
              Data Matrix square 24 x 24.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm26X26">
            <summary>
              Data Matrix square 26 x 26.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm32X32">
            <summary>
              Data Matrix square 32 x 32.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm36X36">
            <summary>
              Data Matrix square 36 x 36.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm40X40">
            <summary>
              Data Matrix square 40 x 40.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm44X44">
            <summary>
              Data Matrix square 44 x 44.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm48X48">
            <summary>
              Data Matrix square 48 x 48.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm52X52">
            <summary>
              Data Matrix square 52 x 52.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm64X64">
            <summary>
              Data Matrix square 64 x 64.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm72X72">
            <summary>
              Data Matrix square 72 x 72.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm80X80">
            <summary>
              Data Matrix square 80 x 80.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm88X88">
            <summary>
              Data Matrix square 88 x 88.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm96X96">
            <summary>
              Data Matrix square 96 x 96.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm104X104">
            <summary>
              Data Matrix square 104 x 104.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm120X120">
            <summary>
              Data Matrix square 120 x 120.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm132X132">
            <summary>
              Data Matrix square 132 x 132.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm144X144">
            <summary>
              Data Matrix square 144 x144.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm8X18">
            <summary>
              Data Matrix rectangular 8 x 18.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm8X32">
            <summary>
              Data Matrix rectangular 8 x 32.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm12X26">
            <summary>
              Data Matrix rectangular 12 x 26.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm12X36">
            <summary>
              Data Matrix rectangular 12 x 36.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm16X36">
            <summary>
              Data Matrix rectangular 16 x 36.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm16X48">
            <summary>
              Data Matrix rectangular 16 x 48.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm8X48">
            <summary>
              Data Matrix rectangular extension 8 x 48;
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm8X64">
            <summary>
              Data Matrix rectangular extension 8 x 64.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm12X64">
            <summary>
              Data Matrix rectangular extension 12 x 64.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm16X64">
            <summary>
              Data Matrix rectangular extension 16 x 64.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm24X48">
            <summary>
              Data Matrix rectangular extension 24 x 48.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm24X64">
            <summary>
              Data Matrix rectangular extension 24 x 64.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm26X40">
            <summary>
              Data Matrix rectangular extension 26 x 40.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm26X48">
            <summary>
              Data Matrix rectangular extension 26 x 48.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size.Dm26X64">
            <summary>
              Data Matrix rectangular extension 26 x 64.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.DeadKeyMapping">
            <summary>
              Represents a calibration mapping from an expected sequence to a reported dead key character sequence.
            </summary>
            <param name="Expected">Gets an expected character sequence.</param>
            <param name="Reported">Gets a reported dead key sequence.</param>
            <param name="InvariantCharactersOnly">
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.DeadKeyMapping.#ctor(System.String,System.String,System.Boolean)">
            <summary>
              Represents a calibration mapping from an expected sequence to a reported dead key character sequence.
            </summary>
            <param name="Expected">Gets an expected character sequence.</param>
            <param name="Reported">Gets a reported dead key sequence.</param>
            <param name="InvariantCharactersOnly">
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DeadKeyMapping.Expected">
            <summary>Gets an expected character sequence.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DeadKeyMapping.Reported">
            <summary>Gets a reported dead key sequence.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.DeadKeyMapping.InvariantCharactersOnly">
            <summary>
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Extensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Extensions.ToInvariantString(System.Char)">
            <summary>
              Converts the value of this instance to its equivalent string representation using culture-invariant format
              information.
            </summary>
            <param name="thisCharacter">The character to be converted.</param>
            <returns>A culture-invariant string.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv">
            <summary>
              Support for Fowler–Noll–Vo hash function. This helper class is specifically designed to
              support hash code generation based on hash codes of .NET data objects.
            </summary>
            <remarks>
              This implementation of FNV algorithms assumes that each data object has a well-defined
              hash code algorithm. Of data objects do not override the base implementation
              of GetHashCode, the algorithm may be compromised due to hash codes based on
              the object reference rather than data.
            </remarks>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv.OffsetBasis32">
            <summary>
              The FNV offset basis.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv.Prime32">
            <summary>
              The FNV prime number.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv.CreateHashFnv1(System.Object[])">
            <summary>
              Create an FNV-1a hash value based on the hash codes of each data object.
            </summary>
            <param name="objects">An array of data objects.</param>
            <returns>A hash value for the data objects.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv.CreateHashFnv1A(System.Object[])">
            <summary>
              Create an FNV-1a hash value based on the hash codes of each data object.
            </summary>
            <param name="objects">An array of data objects.</param>
            <returns>A hash value for the data objects.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv.HashByte(System.Int32,System.Byte,System.Func{System.Int32,System.Byte,System.Int32})">
            <summary>
              Adds the specified byte to the 32-bit hash.
            </summary>
            <param name="hash">The current hash.</param>
            <param name="data">The byte to hash.</param>
            <param name="hashByte">The function for adding the byte to the hash.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Fnv.Combine(System.Int32,System.Object,System.Func{System.Int32,System.Byte,System.Int32})">
            <summary>
              Adds the specified integer to a 32-bit hash, in little-endian order.
            </summary>
            <param name="hash">The current hash.</param>
            <param name="obj">The object whose hashcode must be hashed.</param>
            <param name="hashByte">The function for adding the byte to the hash.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.IAdvice`2">
            <summary>
            Represents an ordered sequence of advice items.
            </summary>
            <typeparam name="TAdviceItem">Type of advice item.</typeparam>
            <typeparam name="TAdviceType">Type of advice type.</typeparam>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.IAdvice`2.Items">
            <summary>
              Gets an ordered collection of advice items.
            </summary>
            <returns>An ordered collection of advice items.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.IAdviceItem`1">
            <summary>
            Represents an individual item of advice for a given condition.
            </summary>
            <typeparam name="TAdviceType">The advice type.</typeparam>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.IAdviceItem`1.AdviceType">
            <summary>
              Gets the type of advice.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.IAdviceItem`1.Condition">
            <summary>
              Gets the condition for which advice is provided.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.IAdviceItem`1.Description">
            <summary>
              Gets the condition for which advice is provided.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.IAdviceItem`1.Advice">
            <summary>
              Gets the advice for the condition.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.IAdviceItem`1.Severity">
            <summary>
              Gets the severity of the condition.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Information">
            <summary>
              Information provided during keyboard calibration.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.InformationLevel,Solidsoft.Reply.BarcodeScanner.Calibration.InformationType,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Information" /> class.
            </summary>
            <param name="level">The calibration information level.</param>
            <param name="type">The additional advisory information for the calibration information.</param>
            <param name="description">The calibration information.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Information.Level">
            <summary>
              Gets the calibration information level.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Information.InformationType">
            <summary>
              Gets the calibration information type.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Information.Description">
            <summary>
              Gets or sets the calibration information.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Information.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.op_Equality(Solidsoft.Reply.BarcodeScanner.Calibration.Information,Solidsoft.Reply.BarcodeScanner.Calibration.Information)">
            <summary>
              Override for the equality operator.
            </summary>
            <param name="information1">The first calibration information.</param>
            <param name="information2">The second calibration information.</param>
            <returns>True, if the calibration information is equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.op_Inequality(Solidsoft.Reply.BarcodeScanner.Calibration.Information,Solidsoft.Reply.BarcodeScanner.Calibration.Information)">
            <summary>
              Override for the inequality operator.
            </summary>
            <param name="information1">The first calibration information.</param>
            <param name="information2">The second calibration information.</param>
            <returns>True, if the calibration information is not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.FromJson(System.String)">
            <summary>
              Initializes the token data from a JSON string representing the serialized data.
            </summary>
            <param name="json">A JSON string representing the serialized data.</param>
            <returns>The deserialised information.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.Equals(Solidsoft.Reply.BarcodeScanner.Calibration.Information)">
            <summary>
              Tests the equality of this calibration information with another.
            </summary>
            <param name="other">The calibration information to be tested.</param>
            <returns>True, if the calibration information is not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.Equals(System.Object)">
            <summary>
              Tests the equality of this calibration information with another.
            </summary>
            <param name="obj">The calibration information to be tested.</param>
            <returns>True, if the calibration information is not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.GetHashCode">
            <summary>
              Returns a hash value for the current calibration information.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.ToString">
            <summary>
              Returns a JSON representation of the calibration information.
            </summary>
            <returns>A JSON representation of the calibration information.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the calibration information.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Information.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
              Handles errors in serialization and deserialization.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.InformationLevel">
            <summary>
              Levels of calibration information.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationLevel.Information">
            <summary>
              Information level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationLevel.Warning">
            <summary>
              Warning level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationLevel.Error">
            <summary>
              Error level.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType">
            <summary>
              The type of calibration information.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.None">
            <summary>
            <p>No calibration information available.</p>
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.AimSupported">
            <summary>
              INFORMATION: AIM identifiers are supported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.AimTransmitted">
            <summary>
              INFORMATION: The barcode scanner is transmitting an AIM identifier: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.AimMayBeTransmitted">
            <summary>
              INFORMATION: The barcode scanner may be transmitting an AIM identifier: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.EndOfLineTransmitted">
            <summary>
              INFORMATION: The barcode scanner is transmitting an end-of-line character sequence: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.GroupSeparatorSupported">
            <summary>
              INFORMATION: Group Separator characters are supported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.RecordSeparatorSupported">
            <summary>
              INFORMATION: Record Separator characters are supported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.FileSeparatorSupported">
            <summary>
              INFORMATION: File separator characters are supported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.UnitSeparatorSupported">
            <summary>
              INFORMATION: Unit separator characters are supported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.ScannerMayCompensateForCapsLock">
            <summary>
              INFORMATION: The barcode scanner may be configured to compensate for Caps Lock.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.KeyboardScript">
            <summary>
              INFORMATION: The computer keyboard supports the following script: {0}.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.Platform">
            <summary>
              INFORMATION: The computer keyboard is configured for the following platform: {0}.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SomeNonInvariantCharactersUnreported">
            <summary>
              WARNING: Some non-invariant ASCII characters cannot be detected.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SomeNonInvariantCharactersUnrecognised">
            <summary>
              WARNING: Some non-invariant ASCII characters are not recognised: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SomeNonInvariantCharacterCombinationsUnrecognised">
            <summary>
              WARNING: Some combinations of non-invariant ASCII characters are not recognised: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.IsoIec15434SyntaxNotRecognised">
            <summary>
              WARNING: Barcodes that use ISO/IEC 15434 syntax cannot be recognised.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.IsoIec15434EdiNotReliablyReadable">
            <summary>
              WARNING: Barcodes that use ISO/IEC 15434 syntax to represent EDI data cannot be reliably read.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.IsoIec15434RecordSeparatorMapping">
            <summary>
              WARNING: The reported character {0} is ambiguous. Barcodes that use ISO/IEC 15434 syntax cannot be read reliably.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.AimNotTransmitted">
            <summary>
              WARNING: The barcode scanner is not transmitting an AIM Identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.AimNotRecognised">
            <summary>
              WARNING: The AIM Identifier cannot be recognised.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.PrefixTransmitted">
            <summary>
              WARNING: The barcode scanner is transmitting a prefix: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.CodeTransmitted">
            <summary>
              WARNING: The barcode scanner is transmitting a code: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SuffixTransmitted">
            <summary>
              WARNING: The barcode scanner is transmitting a suffix: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.EndOfLineNotTransmitted">
            <summary>
              WARNING: The barcode scanner is not transmitting an end-of-line character sequence (e.g. a carriage return).
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.MultipleKeysNonInvariantCharacters">
            <summary>
              WARNING: The reported character {0} is ambiguous. There are multiple keys for the same character, each representing
              a different expected character. However, at most, only one of the expected characters is invariant.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.MultipleKeysMultipleNonInvariantCharacters">
            <summary>
              WARNING: Some reported characters are ambiguous. There are multiple keys for the same character, each representing a
              different non-invariant expected ASCII character: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.MultipleKeysAimFlagCharacter">
            <summary>
              Warning: AIM Identifiers cannot be recognised. The reported character {0} is ambiguous. There are multiple keys
              for this character which represents the AIM flag character as well as other expected character(s).
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.DeadKeyMultiMappingNonInvariantCharacters">
            <summary>
              WARNING: Some reported non-invariant ASCII characters are ambiguous: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.ControlCharacterMappingIsoIec15434EdiNotReliablyReadable">
            <summary>
              WARNING: The reported character {0} is ambiguous. Barcodes that use ISO/IEC 15434 syntax to represent EDI data cannot be reliably read.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonInvariantCharacterSequence">
            <summary>
              WARNING: Some reported character sequences are ambiguous. These characters do not represent invariant characters: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.ControlCharacterMappingAdditionalDataElements">
            <summary>
              WARNING: The reported character sequence {0} is ambiguous. This may prevent reading of any additional data elements included in a barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayouts">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayoutsForInvariants">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond for invariant characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayoutsForNonInvariantCharacters">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond for non-invariant ASCII characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayoutsGroupSeparator">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond when representing Group Separators.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayoutsRecordSeparator">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond when representing Record Separators.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayoutsEdiSeparators">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond when representing EDI separators.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonCorrespondingKeyboardLayoutsForAimIdentifier">
            <summary>
              WARNING: The barcode scanner and computer keyboard layouts do not correspond when representing AIM identifiers.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NonDeterminableKeyboardLayoutCorrespondence">
            <summary>
              Warning - The correspondence of the barcode scanner and computer keyboard layouts cannot be determined.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.CapsLockOn">
            <summary>
              WARNING: Caps Lock is switched on.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.CapsLockProbablyOn">
            <summary>
              WARNING: Caps Lock may be switched on.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.ScannerMayConvertToUpperCase">
            <summary>
              WARNING: Scanner may be configured to convert characters to upper case.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.ScannerMayConvertToLowerCase">
            <summary>
              WARNING: Scanner may be configured to convert characters to lower case.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.ScannerMayInvertCase">
            <summary>
              WARNING: Scanner may be configured to invert character case.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SubOptimalScannerKeyboardPerformance">
            <summary>
              WARNING: The best reported keyboard data entry time during calibration indicates that the barcode scanner does not perform optimally.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.PreProcessorWarning">
            <summary>
            WARNING: A pre-processing reported a warning during calibration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NoCalibrationDataReported">
            <summary>
              ERROR: No calibration data was reported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.UnrecognisedData">
            <summary>
              ERROR: The reported data is unrecognised. The wrong barcode may have been scanned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.TooManyCharactersDetected">
            <summary>
              ERROR: Too many characters detected. The wrong barcode may have been scanned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.PartialCalibrationDataReported">
            <summary>
              WARNING: Partial data reported for calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.IncorrectCalibrationDataReported">
            <summary>
              WARNING: The reported data is for the wrong calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.UndetectedInvariantCharacters">
            <summary>
              ERROR: Some invariant characters cannot be detected.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SomeInvariantCharactersUnrecognised">
            <summary>
              ERROR: Some invariant characters are not recognised by the barcode scanner in its current configuration: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.SomeDeadKeyCombinationsUnrecognisedForInvariants">
            <summary>
              ERROR: Some key combinations that include invariant characters are not recognised: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NoGroupSeparatorMapping">
            <summary>
              ERROR: No group separator is reported.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.MultipleKeys">
            <summary>
              ERROR: The reported character {0} is ambiguous. There are multiple keys for the same character, each representing a
              different expected character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.DeadKeyMultiMapping">
            <summary>
              ERROR: The reported character {0} is ambiguous. The same character is reported for multiple dead key sequences
              representing different expected characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.DeadKeyMultipleKeys">
            <summary>
              ERROR: The reported dead key character {0} is ambiguous. There are multiple dead keys for the same character, each
              representing a different expected character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.MultipleSequences">
            <summary>
              ERROR: The reported character sequence {0} is ambiguous. The same sequence is reported for multiple expected
              character sequences.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.MultipleSequencesForScannerDeadKey">
            <summary>
              ERROR: The reported character sequence {0} is ambiguous. The same sequence is reported for multiple dead keys in
              the barcode scanner's keyboard layout.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.IncompatibleScannerDeadKey">
            <summary>
              ERROR: The character {0} cannot be represented reliably because of incompatibility with the keyboard layout.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.GroupSeparatorMapping">
            <summary>
              ERROR: The reported character sequence {0} is ambiguous. This represents the group separator character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.LigatureCharacters">
            <summary>
              ERROR: Some reported characters are ambiguous. They can be reported individually but are also used to compose ligatures: {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NoDelimiters">
            <summary>
              ERROR: The reported calibration data cannot be processed. It does not include expected delimiters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.NoTemporaryDelimiterCandidate">
            <summary>
              ERROR: The reported calibration data cannot be processed. No character can be determined to act as a temporary
              delimiter.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.CalibrationFailed">
            <summary>
              ERROR: Calibration failed. {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.CalibrationFailedUnexpectedly">
            <summary>
              ERROR: Calibration failed unexpectedly. {0}
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.InformationType.PreProcessorError">
            <summary>
            ERROR: Calibration failed due to a pre-processing error.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.LigatureMapping">
            <summary>
              Represents a calibration mapping from a ligature to a reported character.
            </summary>
            <param name="Expected">Gets an expected character.</param>
            <param name="Reported">Gets a reported ligature sequence.</param>
            <param name="InvariantCharacterOnly">
              Gets a value indicating whether the expected character is am invariant character.
            .</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.LigatureMapping.#ctor(System.Char,System.String,System.Boolean)">
            <summary>
              Represents a calibration mapping from a ligature to a reported character.
            </summary>
            <param name="Expected">Gets an expected character.</param>
            <param name="Reported">Gets a reported ligature sequence.</param>
            <param name="InvariantCharacterOnly">
              Gets a value indicating whether the expected character is am invariant character.
            .</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.LigatureMapping.Expected">
            <summary>Gets an expected character.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.LigatureMapping.Reported">
            <summary>Gets a reported ligature sequence.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.LigatureMapping.InvariantCharacterOnly">
            <summary>
              Gets a value indicating whether the expected character is am invariant character.
            .</summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Else`1">
            <summary>
              Represents an Else block in an If condition in the Environment monad.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Else`1.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Else`1"/> class.
            </summary>
            <param name="env">The object used to store environment data.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Else`1.EndIf">
            <summary>
              Gets a value indicating whether the condition value is true.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Else`1.ElseIf(System.Func{`0,System.Boolean})">
            <summary>
              Returns an <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1"/> class for an inner If block.
            </summary>
            <param name="predicate">
              A function over the environment that returns a condition value.
            </param>
            <returns>An <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1"/> class for an inner If block.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment`1">
            <summary>
              An Environment monad implemented as a delegate over an environment type.
              Environment monads invoke a sequence of functions, threading the environment
              data object through each one. The functions are lazy-evaluated.
            </summary>
            <typeparam name="TEnv">The type of the environment data.</typeparam>
            <returns>A lazy-evaluated function that returns the environment data object.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.EnvironmentMonad">
            <summary>
              Extension methods and delegates that define an Environment monad.  The monad
              manages the threading of an environment of data through sequences of functions.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.EnvironmentMonad.If``1(Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{``0},System.Func{``0,System.Boolean})">
            <summary>
              Extended Bind function for conditional composition of functions within the
              Environment monad. The environment is threaded through each function.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
            <param name="sourceEnvironment">The source Environment monad.</param>
            <param name="predicate">
              Transforms the source environment data object into a new Environment monad if
              the predicate returns 'true'.
            </param>
            <returns>The next Environment monad.</returns>
            <remarks>
              The environment data object must implement the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.IEnvironment`1" />
              interface.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.EnvironmentMonad.Do``1(Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{``0},System.Func{``0,Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{``0}})">
            <summary>
              Bind function for composing functions within the Environment monad.
              The environment is threaded through each function.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
            <param name="sourceEnvironment">The source Environment monad.</param>
            <param name="transformation">
              Transforms the source environment data object into a new Environment monad.
            </param>
            <returns>The next Environment monad.</returns>
            <remarks>
              The environment data object must implement the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.IEnvironment`1" />
              interface. The bind function is lazy-evaluated.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.EnvironmentMonad.StartProcess``1(``0)">
            <summary>
              Unit function used to obtain an Environment monad from an object
              used to store environment data.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
            <param name="data">The source environment data object.</param>
            <returns>An Environment monad over the environment data object.</returns>
            <remarks>
              The environment data object must implement the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.IEnvironment`1" />
              interface.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.EnvironmentMonad.Continue``1(``0)">
            <summary>
              Unit function used to obtain an Environment monad from an object
              used to store environment data.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
            <param name="data">The source environment data object.</param>
            <returns>An Environment monad over the environment data object.</returns>
            <remarks>
              The environment data object must implement the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.IEnvironment`1" />
              interface.  This synonym for 'StartProcess' should be used when continuing
              a started process on a token.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.EnvironmentMonad.End``1(Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{``0})">
            <summary>
              Obtains a data object from an Environment monad.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
            <param name="environment">The Environment monad.</param>
            <returns>The data object.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.IEnvironment`1">
            <summary>
              Marks a type as an environment data object, for use with the Environment monad.
            </summary>
            <typeparam name="T">The type of the environment data object.</typeparam>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1">
            <summary>
              Represents an If condition in the Environment monad.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{`0},System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1"/> class.
            </summary>
            <param name="env">The object used to store environment data.</param>
            <param name="condition">The condition value - true or false.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1.EndIf">
            <summary>
              Gets the original environment monad, effectively marking
              the end of the If block.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1.Condition">
            <summary>
              Gets a value indicating whether the condition value is true.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.If`1.Then(System.Func{`0,Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{`0}})">
            <summary>
              Invoke a Then block.  Actions in the Then block are only invoked if the
              condition value is true.
            </summary>
            <param name="func">
              Any function that takes a data object and returns
              an Environment for the data object type.
            </param>
            <returns>A Then block for the If condition in the Environment monad.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Then`1">
            <summary>
              Represents a Then block in an If condition in the Environment monad.
            </summary>
            <typeparam name="TEnv">
              The type of object used to store environment data.
            </typeparam>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Then`1.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{`0},System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Then`1"/> class.
            </summary>
            <param name="env">The object used to store environment data.</param>
            <param name="condition">The condition value - true or false.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Then`1.EndIf">
            <summary>
              Gets the original environment monad, effectively marking
              the end of the If block.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Then`1.Condition">
            <summary>
              Gets a value indicating whether the condition value is true.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Then`1.Else(System.Func{`0,Solidsoft.Reply.BarcodeScanner.Calibration.ProcessFlow.Environment{`0}})">
            <summary>
              Invoke an Else block.  Actions in the Else block are only invoked if the
              condition value is false.
            </summary>
            <param name="func">
              Any function that takes a data object and returns
              an Environment for the data object type.
            </param>
            <returns>An Else block for the If condition in the Environment monad.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_100">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_105">
            <summary>
              Looks up a localized string similar to You may need to enter data manually into your software for barcodes that contain data formatted according to ISO/IEC 15434 characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_110">
            <summary>
              Looks up a localized string similar to If you experience problems when scanning barcodes that contain Format 05 or Format 06 data, enter data manually into your software. If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_115">
            <summary>
              Looks up a localized string similar to Enter data manually into your software for barcodes that contain Format 05 or Format 06 data. If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_200">
            <summary>
              Looks up a localized string similar to Configure your barcode scanner to transmit AIM identifiers. If you have problems when transmitting AIM identifiers, revert to the current configuration..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_205">
            <summary>
              Looks up a localized string similar to You may want to switch off Caps Lock and test again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_206">
            <summary>
              Looks up a localized string similar to Check your barcode scanner, keyboard and computer configurations and reconfigure them if necessary.;;You may want to switch off Caps Lock and test again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_210">
            <summary>
              Looks up a localized string similar to You may want to switch Caps Lock off..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_215">
            <summary>
              Looks up a localized string similar to Configure your barcode scanner to transmit end-of-line sequences and test again. If you have problems when transmitting end-of-line sequences, revert to the current configuration..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_220">
            <summary>
              Looks up a localized string similar to If you have problems scanning barcode data, configure your barcode scanner so that it does not transmit a prefix..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_225">
            <summary>
              Looks up a localized string similar to If you have problems scanning barcode data, configure your barcode scanner so that it does not transmit any suffix..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_230">
            <summary>
              Looks up a localized string similar to Make sure your keyboard layouts match.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_231">
            <summary>
              Looks up a localized string similar to Make sure your keyboard layouts match.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_232">
            <summary>
              Looks up a localized string similar to Check that your barcode scanner is configured to transmit AIM identifiers..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_235">
            <summary>
              Looks up a localized string similar to Make sure your keyboard layouts match.;;If necessary, configure your barcode scanner to emulate a numeric keypad and transmit AIM identifiers..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_240">
            <summary>
              Looks up a localized string similar to If you experience problems when scanning barcodes that contain Format 05 or Format 06 data, enter data manually into your software. If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_241">
            <summary>
              Looks up a localized string similar to Enter data manually into your software for barcodes that contain Format 05 or Format 06 data. If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_245">
            <summary>
              Looks up a localized string similar to Enter data manually into your software for barcodes that contain Format 05 or Format 06 data. If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_250">
            <summary>
              Looks up a localized string similar to If you expect to scan barcodes that contain data formatted according to ISO/IEC 15434, run the test again, this time including the ISO/IEC 15434 data compatibility test..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_255">
            <summary>
              Looks up a localized string similar to If the problem persists, check the configuration of your barcode scanner. Look for settings that will improve keyboard entry performance..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_256">
            <summary>
              Looks up a localized string similar to If the problem persists, check the configuration of your barcode scanner. Look for settings that will improve keyboard entry performance..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_260">
            <summary>
              Looks up a localized string similar to If you scan other barcodes, and experience difficulty, try configuring your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_261">
            <summary>
              Looks up a localized string similar to If you scan other barcodes, and experience difficulty, try configuring your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_265">
            <summary>
              Looks up a localized string similar to If you scan other barcodes, and experience difficulty, try configuring your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_270">
            <summary>
              Looks up a localized string similar to If you scan EDI barcodes, and experience difficulty, try configuring your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_271">
            <summary>
              Looks up a localized string similar to If you scan EDI barcodes, and experience difficulty, try configuring your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_275">
            <summary>
              Looks up a localized string similar to If you scan EDI barcodes, and experience difficulty, try configuring your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_300">
            <summary>
              Looks up a localized string similar to Try again, making sure you scan the correct barcode(s)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_301">
            <summary>
              Looks up a localized string similar to Try again, making sure you scan the correct barcode..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_303">
            <summary>
              Looks up a localized string similar to Try again.;;Make sure your keyboard layouts match.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_304">
            <summary>
              Looks up a localized string similar to Try again, making sure you scan the correct barcode(s)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_305">
            <summary>
              Looks up a localized string similar to Try again, making sure you scan the correct barcode.;;If you are asked to scan multiple barcodes, make sure you scan them in the correct order..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_306">
            <summary>
              Looks up a localized string similar to Try again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_307">
            <summary>
              Looks up a localized string similar to If your software cannot compensate, configure your barcode scanner to match your computer keyboard layout.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_308">
            <summary>
              Looks up a localized string similar to Configure your barcode scanner to match your computer keyboard layout.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_309">
            <summary>
              Looks up a localized string similar to If your software cannot compensate, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_310">
            <summary>
              Looks up a localized string similar to Configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_315">
            <summary>
              Looks up a localized string similar to Configure your barcode scanner to match your computer keyboard layout.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_316">
            <summary>
              Looks up a localized string similar to If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_320">
            <summary>
              Looks up a localized string similar to If your software cannot compensate, configure your barcode scanner to match your computer keyboard layout.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_325">
            <summary>
              Looks up a localized string similar to Switch Caps Lock off and test again.;;If you must keep Caps Lock switched on while scanning barcodes, you may be able to configure your barcode scanner to compensate..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_326">
            <summary>
              Looks up a localized string similar to Switch Caps Lock off and test again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_327">
            <summary>
              Looks up a localized string similar to Check your barcode scanner, keyboard and computer configuration and reconfigure them if necessary.;;Switch off Caps Lock and test again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_328">
            <summary>
              Looks up a localized string similar to Check your barcode scanner, keyboard and computer configuration and reconfigure them if necessary.;;Switch off Caps Lock and test again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_330">
            <summary>
              Looks up a localized string similar to Check your scanner, keyboard and computer configuration and reconfigure them if necessary. .
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_331">
            <summary>
              Looks up a localized string similar to Check your barcode scanner, keyboard and computer configuration and reconfigure them if necessary..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_332">
            <summary>
              Looks up a localized string similar to Check your barcode scanner, keyboard and computer configuration and reconfigure them if necessary..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_335">
            <summary>
              Looks up a localized string similar to If possible, configure your computer to use a different keyboard layout.;;If necessary, configure your barcode scanner to emulate a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Advice_390">
            <summary>
              Looks up a localized string similar to Try again..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_100">
            <summary>
              Looks up a localized string similar to Your system reads most barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_105">
            <summary>
              Looks up a localized string similar to Your system reads most barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_110">
            <summary>
              Looks up a localized string similar to Your system reads GS1 barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_115">
            <summary>
              Looks up a localized string similar to Your system reads GS1 barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_200">
            <summary>
              Looks up a localized string similar to Your barcode scanner does not transmit AIM identifiers..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_205">
            <summary>
              Looks up a localized string similar to Caps Lock is on, but the letter casing is reported correctly..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_206">
            <summary>
              Looks up a localized string similar to Caps Lock is on, but the letter casing is preserved..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_210">
            <summary>
              Looks up a localized string similar to Caps Lock is switched on..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_215">
            <summary>
              Looks up a localized string similar to Your barcode scanner does not transmit an end-of-line sequence..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_220">
            <summary>
              Looks up a localized string similar to Your barcode scanner transmits a prefix..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_225">
            <summary>
              Looks up a localized string similar to Your barcode scanner transmits a suffix..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_230">
            <summary>
              Looks up a localized string similar to Your system may not read AIM identifier characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_231">
            <summary>
              Looks up a localized string similar to Your system cannot read AIM identifier characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_232">
            <summary>
              Looks up a localized string similar to Your barcode scanner may not transmit AIM identifiers..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_235">
            <summary>
              Looks up a localized string similar to Your system cannot read the barcode type identifier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_240">
            <summary>
              Looks up a localized string similar to Your system may not be able to read Format 05 or Format 06 barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_241">
            <summary>
              Looks up a localized string similar to Your system cannot read Format 05 or Format 06 barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_245">
            <summary>
              Looks up a localized string similar to Your system cannot read Format 05 or Format 06 barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_250">
            <summary>
              Looks up a localized string similar to You did not test compatibility for compatibility with ISO/IEC 15434..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_255">
            <summary>
              Looks up a localized string similar to Data input performance is slower than expected..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_256">
            <summary>
              Looks up a localized string similar to Data input performance is very poor..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_260">
            <summary>
              Looks up a localized string similar to Your system cannot read barcodes reliably if they contain non-invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_261">
            <summary>
              Looks up a localized string similar to Your system cannot read barcodes reliably if they contain non-invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_265">
            <summary>
              Looks up a localized string similar to Your system cannot read barcodes reliably if they contain non-invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_270">
            <summary>
              Looks up a localized string similar to Your system cannot read barcodes reliably if they contain EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_271">
            <summary>
              Looks up a localized string similar to Your system cannot read barcodes reliably if they contain EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_275">
            <summary>
              Looks up a localized string similar to Your system cannot read barcodes reliably if they contain EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_300">
            <summary>
              Looks up a localized string similar to The test failed..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_301">
            <summary>
              Looks up a localized string similar to No data was reported for the barcode..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_303">
            <summary>
              Looks up a localized string similar to Some data was not reported when you scanned the barcode..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_304">
            <summary>
              Looks up a localized string similar to No data was reported for one or more barcodes..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_305">
            <summary>
              Looks up a localized string similar to You scanned a barcode out of sequence..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_306">
            <summary>
              Looks up a localized string similar to Some data was not reported when you scanned one or more barcodes..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_307">
            <summary>
              Looks up a localized string similar to Your barcode scanner and computer have different keyboard layouts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_308">
            <summary>
              Looks up a localized string similar to Your barcode scanner and computer have different keyboard layouts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_309">
            <summary>
              Looks up a localized string similar to Hidden characters in barcodes are not reported correctly..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_310">
            <summary>
              Looks up a localized string similar to Hidden characters in barcodes are not reported correctly..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_315">
            <summary>
              Looks up a localized string similar to Your barcode scanner and computer have different keyboard layouts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_316">
            <summary>
              Looks up a localized string similar to Hidden characters in barcodes are not reported correctly..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_320">
            <summary>
              Looks up a localized string similar to Your system cannot read barcode characters reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_325">
            <summary>
              Looks up a localized string similar to Caps Lock is switched on..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_326">
            <summary>
              Looks up a localized string similar to Caps Lock is switched on..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_327">
            <summary>
              Looks up a localized string similar to Your barcode scanner may be configured to convert characters to upper case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_328">
            <summary>
              Looks up a localized string similar to Your barcode scanner may be configured to convert characters to lower case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_330">
            <summary>
              Looks up a localized string similar to Your barcode scanner may be configured to simulate Caps Lock..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_331">
            <summary>
              Looks up a localized string similar to Your barcode scanner may be configured to convert characters to upper case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_332">
            <summary>
              Looks up a localized string similar to Your barcode scanner may be configured to convert characters to lower case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_335">
            <summary>
              Looks up a localized string similar to Your keyboard layout supports {0} characters and cannot read barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Condition_390">
            <summary>
              Looks up a localized string similar to The test failed unexpectedly..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_105">
            <summary>
              Looks up a localized string similar to However, you did not test compatibility with ISO/IEC 15434. Your system may not be able to read barcodes reliably if they contain data formatted according to ISO/IEC 15434..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_110">
            <summary>
              Looks up a localized string similar to However, your verification software may not read barcodes reliably if the contain data formatted according to ISO/IEC 15434..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_115">
            <summary>
              Looks up a localized string similar to However, it cannot read barcodes reliably if the contain data formatted according to ISO/IEC 15434..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_200">
            <summary>
              Looks up a localized string similar to AIM identifiers represent the barcode type. Your software may use them to eliminate unnecessary alerts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_205">
            <summary>
              Looks up a localized string similar to Your barcode scanner is probably configured to compensate automatically for Caps Lock..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_206">
            <summary>
              Looks up a localized string similar to Your Caps Lock key may be disabled or remapped. .
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_210">
            <summary>
              Looks up a localized string similar to However, your computer keyboard layout is for a script that does not support upper- and lower-case letters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_215">
            <summary>
              Looks up a localized string similar to This may slow your scanning performance. However, your software may not support end-of-line sequences..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_220">
            <summary>
              Looks up a localized string similar to Your software may not recognise the prefix. .
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_225">
            <summary>
              Looks up a localized string similar to Your software may not recognise the suffix. .
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_230">
            <summary>
              Looks up a localized string similar to AIM identifiers represent the barcode type. Your software may use them to eliminate unnecessary alerts. However, the software must implement character mapping to read AIM identifiers reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_231">
            <summary>
              Looks up a localized string similar to AIM identifiers represent the barcode type. Your software may use them to eliminate unnecessary alerts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_232">
            <summary>
              Looks up a localized string similar to Your barcode scanner may transmit AIM identifiers, but this is not certain.  AIM identifiers represent the barcode type. Your software may use them to eliminate unnecessary alerts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_235">
            <summary>
              Looks up a localized string similar to AIM identifiers represent the barcode type. Your software may use them to eliminate unnecessary alerts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_240">
            <summary>
              Looks up a localized string similar to Your software must implement character mapping to read barcodes reliably if they contain non-invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_245">
            <summary>
              Looks up a localized string similar to Some software may be able to compensate for this by analysing key codes rather than characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_255">
            <summary>
              Looks up a localized string similar to This could be a temporary or intermittent problem. Your computer may be busy, running a virus checker or a predictive text service. Your barcode scanner may be configured as a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_256">
            <summary>
              Looks up a localized string similar to This could be a temporary or intermittent problem. Your computer may be busy, running a virus checker or a predictive text service. Your barcode scanner may be configured as a numeric keypad..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_260">
            <summary>
              Looks up a localized string similar to Some barcodes may contain non-invariant characters. Your software must implement character mapping to read these barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_261">
            <summary>
              Looks up a localized string similar to Some barcodes may contain non-invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_265">
            <summary>
              Looks up a localized string similar to Some barcodes may contain non-invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_270">
            <summary>
              Looks up a localized string similar to Some barcodes may contain EDI data. Your software must implement character mapping to read these barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_271">
            <summary>
              Looks up a localized string similar to Some barcodes may contain EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_275">
            <summary>
              Looks up a localized string similar to Some barcodes may contain EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_300">
            <summary>
              Looks up a localized string similar to You may have scanned a wrong barcode or entered incorrect data using the keyboard. Your barcode scanner or system may be slow, or some unexpected or intermittent issue may have occurred..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_303">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts may not correspond. You may have scanned a wrong barcode or entered incorrect data using the keyboard. Your barcode scanner or system may be slow, or some unexpected or intermittent issue may have occurred..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_306">
            <summary>
              Looks up a localized string similar to You may have scanned a wrong barcode or entered incorrect data using the keyboard. Your barcode scanner or system may be slow, or some unexpected or intermittent issue may have occurred..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_307">
            <summary>
              Looks up a localized string similar to Your software must implement character mapping to read barcodes reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_309">
            <summary>
              Looks up a localized string similar to Your software may be able to compensate..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_315">
            <summary>
              Looks up a localized string similar to Your software may be able to compensate. However, your system cannot read characters correctly for barcodes that contain Format 05 or Format 06 data. Some software may be able to compensate for this by analysing key codes rather than characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_316">
            <summary>
              Looks up a localized string similar to Your software may be able to compensate. However, your system cannot read barcode characters correctly for barcodes that contain Format 05 or Format 06 data. Some software may be able to compensate for this by analysing key codes rather than characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_320">
            <summary>
              Looks up a localized string similar to Some software may be able to compensate for this by analysing key codes rather than characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_326">
            <summary>
              Looks up a localized string similar to When Caps Lock is on, the default behaviour is to report all characters in upper-case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_327">
            <summary>
              Looks up a localized string similar to Your system cannot read barcode characters reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_328">
            <summary>
              Looks up a localized string similar to Your system cannot read barcode characters reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_331">
            <summary>
              Looks up a localized string similar to Your system cannot read barcode characters reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_332">
            <summary>
              Looks up a localized string similar to Your system cannot read barcode characters reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.Description_390">
            <summary>
              Looks up a localized string similar to Your barcode scanner or system may be slow or it may be affected by anti-virus software or some other unexpected or intermittent issue..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Advice.ErrorWhileResolvingKeyboardScripts">
            <summary>
              Looks up a localized string similar to Error while resolving keyboard scripts: {0}.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.AdviceItemRemainingMismatch">
            <summary>
              Looks up a localized string similar to Advice items remaining mismatch..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.Barcodes_Error_100">
            <summary>
              Looks up a localized string similar to Suffix {0} does not match expected suffix {1}..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrateDeadKeyIncorrectBarcodeProvenance">
            <summary>
              Looks up a localized string similar to Incorrect barcode provenance..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.Calibration_Error_001">
            <summary>
              Looks up a localized string similar to Failed to insert space placeholders. .
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.Calibration_Error_002">
            <summary>
              Looks up a localized string similar to Invalid argument provided to regular expression Replace method..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.Calibration_Error_003">
            <summary>
              Looks up a localized string similar to The regular expression timed out while performing a match..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationIncorrectErrorInformationType">
            <summary>
              Looks up a localized string similar to Incorrect error information type..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationIncorrectInformationalInformationType">
            <summary>
              Looks up a localized string similar to Incorrect informational information type..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationIncorrectWarningInformationType">
            <summary>
              Looks up a localized string similar to Incorrect warning information type..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_130">
            <summary>
              Looks up a localized string similar to AIM identifiers are supported..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_131">
            <summary>
              Looks up a localized string similar to The barcode scanner is transmitting an AIM identifier: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_132">
            <summary>
              Looks up a localized string similar to The barcode scanner may be transmitting an AIM identifier: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_150">
            <summary>
              Looks up a localized string similar to The barcode scanner is transmitting an end-of-line character sequence: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_160">
            <summary>
              Looks up a localized string similar to Group Separator characters are supported..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_161">
            <summary>
              Looks up a localized string similar to Record Separator characters are supported..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_162">
            <summary>
              Looks up a localized string similar to EDI separator characters are supported..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_170">
            <summary>
              Looks up a localized string similar to The barcode scanner may be configured to compensate for Caps Lock..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_180">
            <summary>
              Looks up a localized string similar to The computer keyboard supports the following script: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_190">
            <summary>
              Looks up a localized string similar to The computer keyboard is configured for the following platform: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_200">
            <summary>
              Looks up a localized string similar to Some non-invariant ASCII characters cannot be detected..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_201">
            <summary>
              Looks up a localized string similar to Some non-invariant ASCII characters are not recognised: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_202">
            <summary>
              Looks up a localized string similar to Some combinations of non-invariant ASCII characters are not recognised: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_210">
            <summary>
              Looks up a localized string similar to Barcodes that use ISO/IEC 15434 syntax cannot be recognised..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_211">
            <summary>
              Looks up a localized string similar to Barcodes that use ISO/IEC 15434 syntax to represent EDI data cannot be reliably read..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_212">
            <summary>
              Looks up a localized string similar to The reported character {0} is ambiguous. Barcodes that use ISO/IEC 15434 syntax cannot be read reliably..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_220">
            <summary>
              Looks up a localized string similar to The barcode scanner is not transmitting an AIM Identifier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_221">
            <summary>
              Looks up a localized string similar to The AIM Identifier cannot be recognised..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_230">
            <summary>
              Looks up a localized string similar to The barcode scanner is transmitting a prefix: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_231">
            <summary>
              Looks up a localized string similar to The barcode scanner is transmitting a code: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_232">
            <summary>
              Looks up a localized string similar to The barcode scanner is transmitting a suffix: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_240">
            <summary>
              Looks up a localized string similar to The barcode scanner is not transmitting an end-of-line character sequence (e.g. a carriage return)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_250">
            <summary>
              Looks up a localized string similar to The reported character {0} is ambiguous. There are multiple keys for the same character, each representing a different expected character. However, at most, only one of the expected characters is invariant..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_251">
            <summary>
              Looks up a localized string similar to Some reported characters are ambiguous. There are multiple keys for the same character, each representing a different non-invariant expected ASCII character: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_252">
            <summary>
              Looks up a localized string similar to AIM Identifiers cannot be recognised. The reported character {0} is ambiguous. There are multiple keys for this character which represents the AIM flag character as well as other expected character(s)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_253">
            <summary>
              Looks up a localized string similar to Some reported non-invariant ASCII characters are ambiguous: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_254">
            <summary>
              Looks up a localized string similar to The reported character {0} is ambiguous. Barcodes that use ISO/IEC 15434 syntax to represent EDI data cannot be reliably read..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_255">
            <summary>
              Looks up a localized string similar to Some reported character sequences are ambiguous. These characters do not represent invariant characters: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_256">
            <summary>
              Looks up a localized string similar to The reported character sequence {0} is ambiguous. This may prevent reading of any additional data elements included in a barcode..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_260">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_261">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond for invariant characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_262">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond for non-invariant ASCII characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_263">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond when representing Group Separators..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_264">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond when representing Record Separators..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_265">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond when representing EDI separators..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_266">
            <summary>
              Looks up a localized string similar to The barcode scanner and computer keyboard layouts do not correspond when representing AIM identifiers..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_267">
            <summary>
              Looks up a localized string similar to The correspondence of the barcode scanner and computer keyboard layouts cannot be determined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_270">
            <summary>
              Looks up a localized string similar to Caps Lock is switched on..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_271">
            <summary>
              Looks up a localized string similar to Caps Lock may be switched on..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_272">
            <summary>
              Looks up a localized string similar to The barcode scanner may be configured to convert characters to upper case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_273">
            <summary>
              Looks up a localized string similar to The barcode scanner may be configured to convert characters to lower case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_274">
            <summary>
              Looks up a localized string similar to The barcode scanner may be configured to invert character case..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_280">
            <summary>
              Looks up a localized string similar to The best reported keyboard data entry time during calibration indicates that the barcode scanner does not perform optimally..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_300">
            <summary>
              Looks up a localized string similar to No calibration data was reported..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_301">
            <summary>
              Looks up a localized string similar to The reported data is unrecognised. The wrong barcode may have been scanned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_302">
            <summary>
              Looks up a localized string similar to Too many characters detected. The wrong barcode may have been scanned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_303">
            <summary>
              Looks up a localized string similar to Partial data was reported for calibration barcode..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_304">
            <summary>
              Looks up a localized string similar to The reported data is for the wrong calibration barcode..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_310">
            <summary>
              Looks up a localized string similar to Some invariant characters cannot be detected..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_311">
            <summary>
              Looks up a localized string similar to Some invariant characters are not recognised by the barcode scanner in its current configuration: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_312">
            <summary>
              Looks up a localized string similar to Some key combinations that include invariant characters are not recognised: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_320">
            <summary>
              Looks up a localized string similar to No group separator is reported..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_360">
            <summary>
              Looks up a localized string similar to The reported character {0} is ambiguous. There are multiple keys for the same character, each representing a different expected character..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_361">
            <summary>
              Looks up a localized string similar to The reported character {0} is ambiguous. The same character is reported for multiple dead key sequences representing different expected characters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_362">
            <summary>
              Looks up a localized string similar to The reported dead key character {0} is ambiguous. There are multiple dead keys for the same character, each representing a different expected character..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_363">
            <summary>
              Looks up a localized string similar to The reported character sequence {0} is ambiguous. The same sequence is reported for multiple expected character sequences..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_364">
            <summary>
              Looks up a localized string similar to The reported character sequence {0} is ambiguous. The same sequence is reported for multiple dead keys in the barcode scanner&apos;s keyboard layout..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_365">
            <summary>
              Looks up a localized string similar to The character {0} cannot be represented reliably because of incompatibility with the keyboard layout..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_366">
            <summary>
              Looks up a localized string similar to The reported character sequence {0} is ambiguous. This represents the group separator character..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_367">
            <summary>
              Looks up a localized string similar to Some reported characters are ambiguous. They can be reported individually but are also used to compose ligatures: {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_370">
            <summary>
              Looks up a localized string similar to The reported calibration data cannot be processed. It does not include expected delimiters..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_371">
            <summary>
              Looks up a localized string similar to The reported calibration data cannot be processed. No character can be determined to act as a temporary delimiter..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_390">
            <summary>
              Looks up a localized string similar to Calibration failed. {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInformation_391">
            <summary>
              Looks up a localized string similar to Calibration failed. {0}.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInvalidAdviceItem">
            <summary>
              Looks up a localized string similar to Invalid advice item..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.CalibrationInvalidInformationLevel">
            <summary>
              Looks up a localized string similar to Invalid information level..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.Unspecified">
            <summary>
              Looks up a localized string similar to unspecified.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Properties.Resources.UnusedExtendedAsciiCharacterNotFound">
            <summary>
              Looks up a localized string similar to Cannot find suitable character for temporary placeholder. All extended ASCII characters are already used in the input string..
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.RecognisedDataElement">
            <summary>
              A recognised data element.
            </summary>
            <remarks>
              Optionally pass a list of recognised data elements to the Calibrator to constrain the GS1 application identifiers
              and/or the ASC MH 10.8.2 data identifiers that the client software needs to recognise whe parsing data. This may
              extend the range of transformation strategies that the calibrator can identify.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.RecognisedDataElement.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Syntax,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.RecognisedDataElement"/> class.
            </summary>
            <param name="syntax">The syntax of the recognised data element.</param>
            <param name="identifier">The data element identifier.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.RecognisedDataElement.Syntax">
            <summary>
              Gets the syntax of the recognised data element.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.RecognisedDataElement.Identifier">
            <summary>
              Gets the identifier of the recognised data element.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance">
            <summary>
              'Traffic Light' assessment of the performance of the barcode scanner keyboard input.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance.High">
            <summary>
              The performance of the keyboard is within the bounds of the 'high performance' threshold.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance.Medium">
            <summary>
              The performance of the keyboard is within the bounds of the 'medium performance' threshold.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance.Low">
            <summary>
              The performance of the keyboard is within the bounds of the 'low performance' threshold.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Segments">
            <summary>
            The segments of data provided in a baseline calibration barcode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.PrefixSegment">
            <summary>
            The data segment containing any prefix and/or AIM identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.InvariantSegment">
            <summary>
            The data segment containing Invariant characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.AdditionalAsciiSegment">
            <summary>
            The data segment containing additional ASCII characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.GroupSeparatorSegment">
            <summary>
            The data segment containing the group separator (GS) character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.FileSeparatorSegment">
            <summary>
            The data segment containing the file separator (FS) character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.RecordSeparatorSegment">
            <summary>
            The data segment containing the record separator (RS) character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.UnitSeparatorSegment">
            <summary>
            The data segment containing the unit separator (US) character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Segments.SuffixSegment">
            <summary>
            The data segment containing any suffix.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator">
            <summary>
              Manages the calibration for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <remarks>
            Supports a stateless model suitable for client/server scenarios where no session state is maintained
            across multiple calls into the server.
            </remarks>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator._calibrator">
            <summary>
            Internal instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Calibrator"/> class.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Assumption)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator" /> class.
            </summary>
            <param name="assumption">The assumption made concerning the use of calibration in client systems.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Data,Solidsoft.Reply.BarcodeScanner.Calibration.Assumption)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator" /> class.
            </summary>
            <param name="calibrationsData">The calibration data.</param>
            <param name="assumption">The assumption made concerning the use of calibration in client systems.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.CurrentBarcodeType">
            <summary>
              Gets the type of calibration barcode currently being processed.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.CalibrationData">
            <summary>
              Gets or sets the Calibration configuration data.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.AssessFormatSupport">
            <summary>
              Gets or sets a value indicating whether to assess Format nn support.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.RecognisedDataElements">
            <summary>
            gets or sets a collection of recognised data elements.
            </summary>
            <remarks>
            Optionally pass a list of recognised data elements to the Calibrator to constrain the GS1 application identifiers
            and/or the ASC MH 10.8.2 data identifiers that the client software needs to recognise whe parsing data. This may
            /extend the range of transformation strategies that the calibrator can identify.
            </remarks>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.IsProcessingRequired">
            <summary>
              Gets a value indicating whether pre-processing of barcode scanner input is required.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.SetReportedPrefix(System.String)">
            <summary>
              Sets the reported prefix that the barcode scanner is expected to include when barcodes are
              scanned.
            </summary>
            <remarks>
            <p>This method is only intended for use when a barcode scanner used for calibration is
              configured to transmit a prefix and the prefix characters contain two or more
              consecutive spaces. Because space characters are used as delimiters in the calibration
              barcodes, a prefix that contains spaces may result in incorrect data recognition during
              calibration, unless you set the prefix value explicitly using this method. You must
              state the prefix, as reported to the library. This may depend on your current computer
              keyboard layout, and may not be identical to the prefix characters programmed into the
              barcode scanner.</p>
            <p>There is no equivalent requirement to state values of suffixes that are reported with
              spaces. The calibrator will correctly handle such suffixes.</p>
            </remarks>
            <param name="reportedPrefix">The expected value of the reported prefix.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.SystemCapabilities(System.Nullable{System.Boolean})">
            <summary>
              Returns the system capabilities for the current calibration.
            </summary>
            <param name="capsLock">
              Optional. Indicates if the keyboard Caps Lock was on or off when calibration was carried out.
            </param>
            <returns>The system capabilities for the current calibration.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.BaselineBarcodes(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get the baseline calibration barcode(s) for the current calibration.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A list of baseline calibration barcodes for the current calibration.
            </returns>
            <remarks>
              If multiple streams are returned, each stream is a barcode containing a segment of the
              calibration data. Multiple streams are returned when smaller barcode sizes are required.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.BaselineBarcodeData(Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get the data for each baseline calibration barcode for the current calibration.
            </summary>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A list of data entries for baseline calibration barcodes for the current calibration.
            </returns>
            <remarks>
              <p>If multiple strings are returned, each string is the data for a barcode containing a segment of
              the calibration data. Multiple strings are returned when smaller barcode sizes are required.</p>
              <p>This method is useful when the client code creates barcodes directly itself, rather than
              depending on the Calibration library.</p>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.Calibrate(System.Int32[],Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.TimeSpan,Solidsoft.Reply.BarcodeScanner.Calibration.Preprocessor)">
            <summary>
              Calibrates for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <param name="data">The reported input after scanning the calibration barcode.</param>
            <param name="token">The current calibration token.</param>
            <param name="capsLock">Indicates if Caps Lock is switched on.</param>
            <param name="platform">The platform on which the system resides.</param>
            <param name="dataEntryTimeSpan">The time span specifying how long it took from the start of the scan to submitting the data.</param>
            <param name="preProcessors">The pre-processor functions, provided as a delegate.</param>
            <returns>The updated calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.Calibrate(System.String,Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.TimeSpan,Solidsoft.Reply.BarcodeScanner.Calibration.Preprocessor)">
            <summary>
              Calibrates for a given combination of barcode scanner and OS keyboard layouts.
            </summary>
            <param name="data">The reported input after scanning the calibration barcode.</param>
            <param name="token">The current calibration token.</param>
            <param name="capsLock">Indicates if Caps Lock is switched on.</param>
            <param name="platform">The platform on which the system resides.</param>
            <param name="dataEntryTimeSpan">The time span specifying how long it took from the start of the scan to submitting the data.</param>
            <param name="preProcessors">The pre-processor functions, provided as a delegate.</param>
            <returns>The updated calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.NextCalibrationToken(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Return the next calibration token.
            </summary>
            <param name="token">The current calibration token.</param>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>The next calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.NextCalibrationToken(System.Boolean,Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Return the next calibration token.
            </summary>
            <param name="generateImages">Indicates whether the library should generate barcode images.</param>
            <param name="token">The current calibration token.</param>
            <returns>The next calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.SupplementalBarcodes(System.Single,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get a dictionary of supplementary calibration barcodes for the current calibration.
            </summary>
            <param name="multiplier">The size multiplier.</param>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A dictionary of calibration barcodes for the current calibration.
            </returns>
            <remarks>
              The values represent additional barcodes used to calibrate for dead keys on the computer
              keyboard. The dictionary key for these additional barcodes is the dead key character.
              Each value in the dictionary is a list of one or more streams. If multiple streams are
              returned, each stream is a barcode containing a segment of the calibration data.
              Multiple streams are returned when smaller barcode sizes are required. The full
              list of barcode streams is only available once the baseline barcode has been scanned and
              the data has been processed.
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.SupplementalBarcodeData(Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size)">
            <summary>
              Get a dictionary of data for supplementary calibration barcodes for the current calibration.
            </summary>
            <param name="size">The size of data matrix required.</param>
            <returns>
              A dictionary of calibration barcodes for the current calibration.
            </returns>
            <remarks>
              <p>The data values represent additional barcodes used to calibrate for dead keys on the computer
              keyboard. The dictionary key for these additional barcodes is the dead key character. Each
              value in the dictionary is a list of one or more strings. If multiple strings are returned,
              each string is the data for a barcode containing a segment of the calibration data. Multiple
              strings are returned when smaller barcode sizes are required. The full list of barcode
              strings is only available once the baseline barcodes have been scanned and the data has been
              processed.</p>
              <p>This method is useful when the client code creates barcodes directly itself, rather than
              depending on the Calibration library.</p>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.StatelessCalibrator.ProcessInput(System.String,System.Collections.Generic.IList{Solidsoft.Reply.Parsers.Common.PreprocessorException}@)">
            <summary>
              Processes input, normalizing it according the calibration character map, converting into
              the correct sequence of characters.
            </summary>
            <param name="input">
              The input to be processed. This is data transmitted by the barcode scanner, as reported to
              the application.
            </param>
            <param name="exceptions">Collection of exceptions.</param>
            <returns>The normalized input, processed according to the calibration character map.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform">
            <summary>
              Platforms supported for calibration.
            </summary>
            <remarks>At this time, we do not support iOS or Android.</remarks>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Unknown">
            <summary>
              The OS family cannot be determined.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Linux">
            <summary>
              Linux. We do not differentiate between different distributions.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Macintosh">
            <summary>
              The Apple Macintosh macOS. NB. This does not include iOS
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Windows">
            <summary>
              Windows (NT family including Windows 10)
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Windows98">
            <summary>
              Windows 98.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.WindowsPhone">
            <summary>
              The Windows Phone (now discontinued)
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.MobileLinux">
            <summary>
              A mobile edition of Linux.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.ChromeOs">
            <summary>
              Chrome OS.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Unix">
            <summary>
              A UNIX-based OS (e.g., OpenBSD, FreeBSD). This also includes Cygwin.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.TabletOs">
            <summary>
              Blackberry Tablet OS.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.WebOs">
            <summary>
              Web OS.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Haiku">
            <summary>
              Haiku (BeOS clone)
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.Android">
            <summary>
              The Android OS.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform.SymbianOs">
            <summary>
              The Symbian OS.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Syntax">
            <summary>
            Barcode syntax types.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Syntax.Gs1ApplicationIdentifiers">
            <summary>
            GS1 Application Identifier syntax.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.Syntax.AscMhDataIdentifiers">
            <summary>
            ASC MH 10.8.2 Data Identifier syntax
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities">
            <summary>
              The capabilities of the combination of the barcode scanner and the system.
            </summary>
            <param name="UnexpectedError">
              Gets a value indicating whether an unexpected error occurred.
            </param>
            <param name="TestsSucceeded">
              Gets a value indicating whether the tests succeeded.
            </param>
            <param name="DataReported">
              Gets a value indicating whether data was reported for all scanned calibration barcodes.
            </param>
            <param name="CorrectSequenceReported">
              Gets a value indicating whether correct sequence of calibration barcodes was scanned.
            </param>
            <remarks>
              By 'correct sequence' we mean that a baseline barcode was scanned, followed by zero or more
              dead key calibration barcodes. If this property is false, it means that the user scanned a
              calibration barcode, but that they scanned a dead key barcode when they should have scanned
              a baseline barcodes, or vice versa. Note that the user could have scanned dead key barcodes
              in the wrong order. However, this will not be detected when setting this property.
            </remarks>
            <param name="CompleteDataReported">
              Gets a value indicating whether complete data was reported for any calibration barcode.
            </param>
            <param name="KeyboardLayoutsCorrespond">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for ASCII, Group separator characters and Record Separator characters. This property
              indicates generally if any keyboard non-correspondence has been detected that could affect
              reading of barcodes.
            </param>
            <remarks>
              Even if the keyboard layouts do not correspond, it can still be possible to read barcodes
              reliably using a map. See the MappingPossible property.
            </remarks>
            <param name="KeyboardLayoutsCorrespondForInvariants">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for invariant characters.
            </param>
            <remarks>
              Even if the keyboard layouts do not correspond, it can still be possible to read barcodes
              reliably using a map. See the MappingPossible property.
            </remarks>
            <param name="KeyboardLayoutsCorrespondForNonInvariantCharacters">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for non-invariant characters.
            </param>
            <remarks>
              Even if the keyboard layouts do not correspond, it can still be possible to read additional
              reliably using a map. See the MappingPossible property.
            </remarks>
            <param name="KeyboardLayoutsCanRepresentGroupSeparator">
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              Group Separator control characters without mapping.
            </param>
            <remarks>
              Because control characters are generally entered using Control sequences, and the scanner
              keyboard layout may not implement corresponding control sequences to the equivalent computer
              keyboard layout, we handle this independently of correspondence for invariant and
              non-invariant characters. The only capability we can assert here is that the combination
              of the barcode scanner and computer are capable of representing ASCII 29 characters directly.
              This is weaker than layout correspondence, as we can't be sure of the exact sequence of
              Windows messages that will be available to an application - only that there will be
              sufficient information in those messages to explicitly record an ASCII
              29 without the need for character-mapping.
            </remarks>
            <param name="KeyboardLayoutsCanRepresentRecordSeparator">
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              Record Separator control characters without mapping.
            </param>
            <remarks>
              Because control characters are generally entered using Control sequences, and the scanner
              keyboard layout may not implement corresponding control sequences to the equivalent computer
              keyboard layout, we handle this independently of correspondence for invariant and
              non-invariant characters. The only capability we can assert here is that the combination
              of the barcode scanner and computer are capable of representing ASCII 30 characters directly.
              This is weaker than layout correspondence, as we can't be sure of the exact sequence of
              Windows messages that will be available to an application - only that there will be
              sufficient information in those messages to explicitly record an ASCII 30 without the need
              for character-mapping.
            </remarks>
            <param name="KeyboardLayoutsCanRepresentEdiSeparators">
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              EDI separator control characters without mapping.
            </param>
            <remarks>
              Because control characters are generally entered using Control sequences, and the scanner
              keyboard layout may not implement corresponding control sequences to the equivalent computer
              keyboard layout, we handle this independently of correspondence for invariant and
              non-invariant characters. The only capability we can assert here is that the combination
              of the barcode scanner and computer are capable of representing ASCII 28 or ASCII 31 characters
              directly. This is weaker than layout correspondence, as we can't be sure of the exact sequence
              of Windows messages that will be available to an application - only that there will be
              sufficient information in those messages to explicitly record an ASCII 28 or ASCII 30 without
              the need for character-mapping.
            </remarks>
            <param name="KeyboardLayoutsCorrespondForAimIdentifier">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for characters used in AIM identifiers.
            </param>
            <param name="CanReadInvariantsReliably">
              Gets a value indicating whether it is possible to map from the barcode scanner
              to the computer keyboard to read invariant-only barcodes reliably, using a mapping
              if necessary.
            </param>
            <remarks>
              If true, this indicates that invariant characters and ASCII 29 characters
              can be read reliably. This implies that any FNC1 (GS1) barcode can be read. It
              also implies that invariant-only data can be read in Format 06 and Format 05
              barcodes as long as ASCII 30 and ASCII 04 characters can be read reliably. See
              the CanReadFormat05AndFormat06Reliably property.
            </remarks>
            <param name="CanReadFormat05AndFormat06Reliably">
              Gets a value indicating whether the calibrated system can read Format 05 and
              Format 06 barcodes reliably, using a mapping if necessary.
            </param>
            <param name="CanReadEdiReliably">
              Gets a value indicating whether the calibrated system can read EDI barcode data
              formatted in accordance with ISO/IEC 15434 reliably, using a mapping if necessary.
            </param>
            <remarks>
            <p></p>
            <p>If the Format 06 and Format 05 tests where not run, the value is null.</p>
            </remarks>
            <param name="CanReadGroupSeparatorReliably">
              Gets a value indicating whether the calibrated system can read Group Separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadRecordSeparatorReliably">
              Gets a value indicating whether the calibrated system can read Record Separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadFileSeparatorsReliably">
              Gets a value indicating whether the calibrated system can read File separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadUnitSeparatorsReliably">
              Gets a value indicating whether the calibrated system can read Unit separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadAimIdentifiersReliably">
              Gets a value indicating whether the calibrated system can read AIM identifiers reliably, using a mapping if necessary.
            </param>
            <param name="CanReadAdditionalAsciiCharactersReliably">
              Gets a value indicating whether the calibrated system can read non-invariant characters reliably, using a mapping if necessary.
            </param>
            <param name="ScannerTransmitsAimIdentifiers">
              Gets a value indicating whether the scanner transmits AIM identifiers.
            </param>
            <param name="ScannerTransmitsEndOfLineSequence">
              Gets a value indicating whether the scanner transmits end-of-line sequences.
            </param>
            <param name="ScannerTransmitsAdditionalPrefix">
              Gets a value indicating whether the scanner transmits additional prefixes.
            </param>
            <param name="ScannerTransmitsAdditionalCode">
              Gets a value indicating whether the scanner transmits an additional code
              between the AIM ID (if present) and the reported data.
            </param>
            <param name="ScannerTransmitsAdditionalSuffix">
              Gets a value indicating whether the scanner transmits additional suffixes.
            </param>
            <param name="ScannerMayConvertToUpperCase">
              Gets a value indicating whether the scanner may be configured to convert lower-case letters to upper case.
            </param>
            <param name="ScannerMayConvertToLowerCase">
              Gets a value indicating whether the scanner may be configured to convert upper-case letters to lower case.
            </param>
            <param name="ScannerKeyboardPerformance">
              Gets the time span specifying how long it took from the start of the scan to submitting the data.
            </param>
            <remarks>
              This cannot be determined with 100% certainty.
            </remarks>
            <param name="KeyboardScriptDoesNotSupportCase">
              Gets a value indicating whether the computer keyboard script does not support upper- and lower-case letters.
            </param>
            <param name="AimIdentifier">
              Gets the AIM identifier transmitted during calibration.
            </param>
            <param name="AimIdentifierUncertain">
              Gets a value indicating whether there is uncertainty about the detected AIM identifier.
            </param>
            <param name="EndOfLineSequence">
              Gets the end-of-line sequence transmitted during calibration.
            </param>
            <param name="AdditionalPrefix">
              Gets the additional prefix transmitted during calibration.
            </param>
            <param name="AdditionalCode">
              Gets the additional code between the AIM ID (if present) and the data transmitted during calibration.
            </param>
            <param name="AdditionalSuffix">
              Gets the additional suffix transmitted during calibration.
            </param>
            <param name="KeyboardScript">
              Gets the computer keyboard script.
            </param>
            <param name="Platform">
              Gets the computer platform (operating system).
            </param>
            <param name="FormatSupportAssessed">
              Gets a value indicating whether calibration included tests for Format nn support.
            </param>
            <param name="CapsLockIndicator">
              Gets a value indicating whether the calibrator determined heuristically if the Caps Lock
              key appears to be on or off.
            </param>
            <param name="DeadKeys">
              Gets a value indicating whether dead key barcodes are required for calibration.
            </param>
            <param name="Assumption">
              Gets the assumption made concerning the use of calibration in client systems.
            </param>
            <param name="Ambiguities">
              Gets a list of ambiguous character sequences that map to a reported character.
            </param>
            <param name="LigatureMappings">
              Gets a list of ligature character sequences that map to a reported character.
            </param>
            <param name="UnrecognisedCharacters">
              Gets a list of unrecognised characters.
            </param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,Solidsoft.Reply.BarcodeScanner.Calibration.SupportedPlatform,System.Boolean,System.Collections.Generic.IList{Solidsoft.Reply.BarcodeScanner.Calibration.CharacterMapping},System.Collections.Generic.IList{Solidsoft.Reply.BarcodeScanner.Calibration.DeadKeyMapping},System.Collections.Generic.IList{Solidsoft.Reply.BarcodeScanner.Calibration.Ambiguity},System.Collections.Generic.IList{Solidsoft.Reply.BarcodeScanner.Calibration.UnrecognisedCharacter},System.Collections.Generic.IList{Solidsoft.Reply.BarcodeScanner.Calibration.LigatureMapping},Solidsoft.Reply.BarcodeScanner.Calibration.Assumption)">
            <summary>
              The capabilities of the combination of the barcode scanner and the system.
            </summary>
            <param name="UnexpectedError">
              Gets a value indicating whether an unexpected error occurred.
            </param>
            <param name="TestsSucceeded">
              Gets a value indicating whether the tests succeeded.
            </param>
            <param name="DataReported">
              Gets a value indicating whether data was reported for all scanned calibration barcodes.
            </param>
            <param name="CorrectSequenceReported">
              Gets a value indicating whether correct sequence of calibration barcodes was scanned.
            </param>
            <remarks>
              By 'correct sequence' we mean that a baseline barcode was scanned, followed by zero or more
              dead key calibration barcodes. If this property is false, it means that the user scanned a
              calibration barcode, but that they scanned a dead key barcode when they should have scanned
              a baseline barcodes, or vice versa. Note that the user could have scanned dead key barcodes
              in the wrong order. However, this will not be detected when setting this property.
            </remarks>
            <param name="CompleteDataReported">
              Gets a value indicating whether complete data was reported for any calibration barcode.
            </param>
            <param name="KeyboardLayoutsCorrespond">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for ASCII, Group separator characters and Record Separator characters. This property
              indicates generally if any keyboard non-correspondence has been detected that could affect
              reading of barcodes.
            </param>
            <remarks>
              Even if the keyboard layouts do not correspond, it can still be possible to read barcodes
              reliably using a map. See the MappingPossible property.
            </remarks>
            <param name="KeyboardLayoutsCorrespondForInvariants">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for invariant characters.
            </param>
            <remarks>
              Even if the keyboard layouts do not correspond, it can still be possible to read barcodes
              reliably using a map. See the MappingPossible property.
            </remarks>
            <param name="KeyboardLayoutsCorrespondForNonInvariantCharacters">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for non-invariant characters.
            </param>
            <remarks>
              Even if the keyboard layouts do not correspond, it can still be possible to read additional
              reliably using a map. See the MappingPossible property.
            </remarks>
            <param name="KeyboardLayoutsCanRepresentGroupSeparator">
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              Group Separator control characters without mapping.
            </param>
            <remarks>
              Because control characters are generally entered using Control sequences, and the scanner
              keyboard layout may not implement corresponding control sequences to the equivalent computer
              keyboard layout, we handle this independently of correspondence for invariant and
              non-invariant characters. The only capability we can assert here is that the combination
              of the barcode scanner and computer are capable of representing ASCII 29 characters directly.
              This is weaker than layout correspondence, as we can't be sure of the exact sequence of
              Windows messages that will be available to an application - only that there will be
              sufficient information in those messages to explicitly record an ASCII
              29 without the need for character-mapping.
            </remarks>
            <param name="KeyboardLayoutsCanRepresentRecordSeparator">
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              Record Separator control characters without mapping.
            </param>
            <remarks>
              Because control characters are generally entered using Control sequences, and the scanner
              keyboard layout may not implement corresponding control sequences to the equivalent computer
              keyboard layout, we handle this independently of correspondence for invariant and
              non-invariant characters. The only capability we can assert here is that the combination
              of the barcode scanner and computer are capable of representing ASCII 30 characters directly.
              This is weaker than layout correspondence, as we can't be sure of the exact sequence of
              Windows messages that will be available to an application - only that there will be
              sufficient information in those messages to explicitly record an ASCII 30 without the need
              for character-mapping.
            </remarks>
            <param name="KeyboardLayoutsCanRepresentEdiSeparators">
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              EDI separator control characters without mapping.
            </param>
            <remarks>
              Because control characters are generally entered using Control sequences, and the scanner
              keyboard layout may not implement corresponding control sequences to the equivalent computer
              keyboard layout, we handle this independently of correspondence for invariant and
              non-invariant characters. The only capability we can assert here is that the combination
              of the barcode scanner and computer are capable of representing ASCII 28 or ASCII 31 characters
              directly. This is weaker than layout correspondence, as we can't be sure of the exact sequence
              of Windows messages that will be available to an application - only that there will be
              sufficient information in those messages to explicitly record an ASCII 28 or ASCII 30 without
              the need for character-mapping.
            </remarks>
            <param name="KeyboardLayoutsCorrespondForAimIdentifier">
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for characters used in AIM identifiers.
            </param>
            <param name="CanReadInvariantsReliably">
              Gets a value indicating whether it is possible to map from the barcode scanner
              to the computer keyboard to read invariant-only barcodes reliably, using a mapping
              if necessary.
            </param>
            <remarks>
              If true, this indicates that invariant characters and ASCII 29 characters
              can be read reliably. This implies that any FNC1 (GS1) barcode can be read. It
              also implies that invariant-only data can be read in Format 06 and Format 05
              barcodes as long as ASCII 30 and ASCII 04 characters can be read reliably. See
              the CanReadFormat05AndFormat06Reliably property.
            </remarks>
            <param name="CanReadFormat05AndFormat06Reliably">
              Gets a value indicating whether the calibrated system can read Format 05 and
              Format 06 barcodes reliably, using a mapping if necessary.
            </param>
            <param name="CanReadEdiReliably">
              Gets a value indicating whether the calibrated system can read EDI barcode data
              formatted in accordance with ISO/IEC 15434 reliably, using a mapping if necessary.
            </param>
            <remarks>
            <p></p>
            <p>If the Format 06 and Format 05 tests where not run, the value is null.</p>
            </remarks>
            <param name="CanReadGroupSeparatorReliably">
              Gets a value indicating whether the calibrated system can read Group Separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadRecordSeparatorReliably">
              Gets a value indicating whether the calibrated system can read Record Separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadFileSeparatorsReliably">
              Gets a value indicating whether the calibrated system can read File separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadUnitSeparatorsReliably">
              Gets a value indicating whether the calibrated system can read Unit separator characters reliably, using a mapping if necessary.
            </param>
            <param name="CanReadAimIdentifiersReliably">
              Gets a value indicating whether the calibrated system can read AIM identifiers reliably, using a mapping if necessary.
            </param>
            <param name="CanReadAdditionalAsciiCharactersReliably">
              Gets a value indicating whether the calibrated system can read non-invariant characters reliably, using a mapping if necessary.
            </param>
            <param name="ScannerTransmitsAimIdentifiers">
              Gets a value indicating whether the scanner transmits AIM identifiers.
            </param>
            <param name="ScannerTransmitsEndOfLineSequence">
              Gets a value indicating whether the scanner transmits end-of-line sequences.
            </param>
            <param name="ScannerTransmitsAdditionalPrefix">
              Gets a value indicating whether the scanner transmits additional prefixes.
            </param>
            <param name="ScannerTransmitsAdditionalCode">
              Gets a value indicating whether the scanner transmits an additional code
              between the AIM ID (if present) and the reported data.
            </param>
            <param name="ScannerTransmitsAdditionalSuffix">
              Gets a value indicating whether the scanner transmits additional suffixes.
            </param>
            <param name="ScannerMayConvertToUpperCase">
              Gets a value indicating whether the scanner may be configured to convert lower-case letters to upper case.
            </param>
            <param name="ScannerMayConvertToLowerCase">
              Gets a value indicating whether the scanner may be configured to convert upper-case letters to lower case.
            </param>
            <param name="ScannerKeyboardPerformance">
              Gets the time span specifying how long it took from the start of the scan to submitting the data.
            </param>
            <remarks>
              This cannot be determined with 100% certainty.
            </remarks>
            <param name="KeyboardScriptDoesNotSupportCase">
              Gets a value indicating whether the computer keyboard script does not support upper- and lower-case letters.
            </param>
            <param name="AimIdentifier">
              Gets the AIM identifier transmitted during calibration.
            </param>
            <param name="AimIdentifierUncertain">
              Gets a value indicating whether there is uncertainty about the detected AIM identifier.
            </param>
            <param name="EndOfLineSequence">
              Gets the end-of-line sequence transmitted during calibration.
            </param>
            <param name="AdditionalPrefix">
              Gets the additional prefix transmitted during calibration.
            </param>
            <param name="AdditionalCode">
              Gets the additional code between the AIM ID (if present) and the data transmitted during calibration.
            </param>
            <param name="AdditionalSuffix">
              Gets the additional suffix transmitted during calibration.
            </param>
            <param name="KeyboardScript">
              Gets the computer keyboard script.
            </param>
            <param name="Platform">
              Gets the computer platform (operating system).
            </param>
            <param name="FormatSupportAssessed">
              Gets a value indicating whether calibration included tests for Format nn support.
            </param>
            <param name="CapsLockIndicator">
              Gets a value indicating whether the calibrator determined heuristically if the Caps Lock
              key appears to be on or off.
            </param>
            <param name="DeadKeys">
              Gets a value indicating whether dead key barcodes are required for calibration.
            </param>
            <param name="Assumption">
              Gets the assumption made concerning the use of calibration in client systems.
            </param>
            <param name="Ambiguities">
              Gets a list of ambiguous character sequences that map to a reported character.
            </param>
            <param name="LigatureMappings">
              Gets a list of ligature character sequences that map to a reported character.
            </param>
            <param name="UnrecognisedCharacters">
              Gets a list of unrecognised characters.
            </param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.UnexpectedError">
            <summary>
              Gets a value indicating whether an unexpected error occurred.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.TestsSucceeded">
            <summary>
              Gets a value indicating whether the tests succeeded.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.DataReported">
            <summary>
              Gets a value indicating whether data was reported for all scanned calibration barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CorrectSequenceReported">
            <summary>
              Gets a value indicating whether correct sequence of calibration barcodes was scanned.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CompleteDataReported">
            <summary>
              Gets a value indicating whether complete data was reported for any calibration barcode.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCorrespond">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for ASCII, Group separator characters and Record Separator characters. This property
              indicates generally if any keyboard non-correspondence has been detected that could affect
              reading of barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCorrespondForInvariants">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for invariant characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCorrespondForNonInvariantCharacters">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for non-invariant characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCanRepresentGroupSeparator">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              Group Separator control characters without mapping.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCanRepresentRecordSeparator">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              Record Separator control characters without mapping.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCanRepresentEdiSeparators">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard can represent
              EDI separator control characters without mapping.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardLayoutsCorrespondForAimIdentifier">
            <summary>
              Gets a value indicating whether the barcode scanner and the computer keyboard correspond
              for characters used in AIM identifiers.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadInvariantsReliably">
            <summary>
              Gets a value indicating whether it is possible to map from the barcode scanner
              to the computer keyboard to read invariant-only barcodes reliably, using a mapping
              if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadFormat05AndFormat06Reliably">
            <summary>
              Gets a value indicating whether the calibrated system can read Format 05 and
              Format 06 barcodes reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadEdiReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read EDI barcode data
              formatted in accordance with ISO/IEC 15434 reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadGroupSeparatorReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read Group Separator characters reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadRecordSeparatorReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read Record Separator characters reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadFileSeparatorsReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read File separator characters reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadUnitSeparatorsReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read Unit separator characters reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadAimIdentifiersReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read AIM identifiers reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CanReadAdditionalAsciiCharactersReliably">
            <summary>
              Gets a value indicating whether the calibrated system can read non-invariant characters reliably, using a mapping if necessary.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerTransmitsAimIdentifiers">
            <summary>
              Gets a value indicating whether the scanner transmits AIM identifiers.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerTransmitsEndOfLineSequence">
            <summary>
              Gets a value indicating whether the scanner transmits end-of-line sequences.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerTransmitsAdditionalPrefix">
            <summary>
              Gets a value indicating whether the scanner transmits additional prefixes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerTransmitsAdditionalCode">
            <summary>
              Gets a value indicating whether the scanner transmits an additional code
              between the AIM ID (if present) and the reported data.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerTransmitsAdditionalSuffix">
            <summary>
              Gets a value indicating whether the scanner transmits additional suffixes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerMayConvertToUpperCase">
            <summary>
              Gets a value indicating whether the scanner may be configured to convert lower-case letters to upper case.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerMayConvertToLowerCase">
            <summary>
              Gets a value indicating whether the scanner may be configured to convert upper-case letters to lower case.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardScriptDoesNotSupportCase">
            <summary>
              Gets a value indicating whether the computer keyboard script does not support upper- and lower-case letters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CapsLockIndicator">
            <summary>
              Gets a value indicating whether the calibrator determined heuristically if the Caps Lock
              key appears to be on or off.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerKeyboardPerformance">
            <summary>
              Gets the time span specifying how long it took from the start of the scan to submitting the data.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.FormatSupportAssessed">
            <summary>
              Gets a value indicating whether calibration included tests for Format nn support.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.AimIdentifier">
            <summary>
              Gets the AIM identifier transmitted during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.AimIdentifierUncertain">
            <summary>
              Gets a value indicating whether there is uncertainty about the detected AIM identifier.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.EndOfLineSequence">
            <summary>
              Gets the end-of-line sequence transmitted during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.AdditionalPrefix">
            <summary>
              Gets the additional prefix transmitted during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.AdditionalCode">
            <summary>
              Gets the additional code between the AIM ID (if present) and the data transmitted during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.AdditionalSuffix">
            <summary>
              Gets the additional suffix transmitted during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.KeyboardScript">
            <summary>
              Gets the computer keyboard script.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.Platform">
            <summary>
              Gets the computer platform (operating system).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.DeadKeys">
            <summary>
              Gets a value indicating whether dead key barcodes are required for calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.Ambiguities">
            <summary>
              Gets a list of ambiguous character sequences that map to a reported character.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.UnrecognisedCharacters">
            <summary>
              Gets a list of unrecognised characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.LigatureMappings">
            <summary>
              Gets a list of ligature character sequences that map to a reported character.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.Assumption">
            <summary>
              Gets the assumption made concerning the use of calibration in client systems.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities._keyboardCapsLock">
            <summary>
              Indicates whether the keyboard Caps Lock key is on or off.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.Assumption,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.Char,System.Char},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Char})">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities"/> class.
            </summary>
            <param name="token">The calibration token.</param>
            <param name="assumption">The assumption made concerning the use of calibration in client systems.</param>
            <param name="capsLock">Indicates whether Caps Lock is switched on.</param>
            <param name="scannerKeyboardPerformance">'Traffic Light' assessment of the performance of the barcode scanner keyboard input.</param>
            <param name="formatSupportAssessed">Indicates whether calibration included tests for Format nn support.</param>
            <param name="deadKeys">Indicates whether dead key barcodes are required for calibration.</param>
            <param name="characterMap">A dictionary of differences in reported and expected characters.</param>
            <param name="deadKeyCharacterMap">A dictionary of initially detected differences in reported and expected characters where the reported data uses dead keys.</param>
            <param name="deadKeysMap">A dictionary of initially detected differences in reported and expected character sequences where the reported data uses dead keys.</param>
            <param name="invariantGs1Ambiguities">A dictionary of ambiguous invariant or other characters that may be used in GS1-compliant barcodes.</param>
            <param name="nonInvariantAmbiguities">A dictionary of ambiguous non-invariant characters that map to a reported character.</param>
            <param name="invariantGs1UnrecognisedCharacters"> A list of unrecognised invariant or other characters that may be used in GS1-compliant barcodes.</param>
            <param name="nonInvariantUnrecognisedCharacters">A list of unrecognised non-invariant characters.</param>
            <param name="ligatureMap">A list of ligature character sequences.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.CapsLock">
            <summary>
            Gets or sets a value indicating whether CAPS LOCK in on or off.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerMayCompensateForCapsLock">
            <summary>
            Gets a value that indicates whether the scanner may compensate for CAPS LOCK.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities.ScannerMayInvertCase">
            <summary>
            Gets a value that indicates whether the scanner may invert the case of characters.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.Token">
            <summary>
              A token passed within the keyboard calibration code to represent the current calibration session. The token
              provides calibration state and results.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Token" /> struct.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.#ctor(System.String,System.String,System.Char,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.IO.Stream,System.String,System.Int32,Solidsoft.Reply.BarcodeScanner.Calibration.DataMatrix.Size,System.Nullable{System.Boolean},Solidsoft.Reply.BarcodeScanner.Calibration.Data,Solidsoft.Reply.BarcodeScanner.Calibration.SystemCapabilities,System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Token" /> struct.
            </summary>
            <param name="barcodeData">
              The unsegmented barcode data for the current calibration barcode.
            </param>
            <param name="key">
              The dead key currently being calibrated. Null indicates baseline calibration.
            </param>
            <param name="value">
              The expected character for the current dead key being calibrated.
            </param>
            <param name="calibrationsRemaining">
              A count of the estimated number of calibrations that still need to be performed during this session.
            </param>
            <param name="smallBarcodeSequenceIndex">
              The index of the current small barcode in a sequence.
            </param>
            <param name="smallBarcodeSequenceCount">
              The number of small barcodes that encode the current calibration data.
            </param>
            <param name="prefix">
              The detected prefix.
            </param>
            <param name="suffix">
              The detected suffix.
            </param>
            <param name="reportedCharacters">
              The reported characters for the current calibration barcode.
            </param>
            <param name="bitmapStream">
              The stream containing the bitmap image of the current calibration barcode.
            </param>
            <param name="svg">
              The SVG content of the image of the current calibration barcode.
            </param>
            <param name="remaining">
              A count of the estimated number of barcodes that will be generated during this session.
            </param>
            <param name="size">
              The size of data matrix required.
            </param>
            <param name="keyboardMatch">
              Indicates whether the scanner and computer keyboard layouts correspond.
            </param>
            <param name="calibrationData">
              The Calibration configuration.
            </param>
            <param name="systemCapabilities">
              The system capabilities and advice items.
            </param>
            <param name="calibrationSessionAbandoned">
              Indicates whether the calibration session was abandoned.
            </param>
            <param name="reportedPrefixSegment">The reported prefix segment.</param>
            <param name="reportedSuffix">The reported suffix segment.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.#ctor(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.Token" /> struct by cloning an existing token.
            </summary>
            <param name="oldToken">
              The unsegmented barcode data for the current calibration barcode.
            </param>
            <param name="extendedData">Optional extended data to add to the token.</param>
            <param name="prefix">A prefix reported by the barcode scanner, if it exists.</param>
            <param name="suffix">A suffix reported by the barcode scanner, if it exists.</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Remaining">
            <summary>
              Gets a count of the number of barcodes that remain to be calibrated during a calibration session.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Size">
            <summary>
              Gets the maximum characters allowed in a barcode image.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.KeyboardMatch">
            <summary>
              Gets a value indicating whether the scanner emulates a keyboard that corresponds with the current computer
              keyboard layout.
            </summary>
            <remarks>
              When true, this property cannot be assumed to indicate that the scanner and computer keyboard layouts are
              identical, but simply that the keys representing ASCII characters are the same in both layouts. Another
              possibility is that the scanner is emulating a numeric keyboard.
            </remarks>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.BitmapStream">
            <summary>
              Gets the stream containing the bitmap image of the current calibration barcode.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Svg">
            <summary>
              Gets the SVG content of the image of the current calibration barcode.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.SystemCapabilities">
            <summary>
              Gets the system capabilities and advice items.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Errors">
            <summary>
              Gets the collection or calibration errors.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Warnings">
            <summary>
              Gets the collection of calibration warnings.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Information">
            <summary>
              Gets the collection of calibration information.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Data">
            <summary>
              Gets data for tokens that is primarily intended for internal calibration use only.
            </summary>c
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.CalibrationData">
            <summary>
              Gets the Calibration configuration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.ExtendedData">
            <summary>
              Gets extended token data that must be used in stateless interactions.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.CalibrationSessionAbandoned">
            <summary>
              Gets a value indicating whether the calibration session has been abandoned.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.ReportedPrefixSegment">
            <summary>
              Gets a list of reported prefix segments.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.ReportedSuffix">
            <summary>
              Gets a reported suffix.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.Token.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.op_Equality(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Override for the equality operator.
            </summary>
            <param name="token1">The first calibration token.</param>
            <param name="token2">The second calibration token.</param>
            <returns>True, if the calibration tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.op_Inequality(Solidsoft.Reply.BarcodeScanner.Calibration.Token,Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Override for the inequality operator.
            </summary>
            <param name="token1">The first calibration token.</param>
            <param name="token2">The second calibration token.</param>
            <returns>True, if the calibration tokens are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.FromJson(System.String)">
            <summary>
              Initializes the token data from a JSON string representing the serialized data.
            </summary>
            <param name="json">A JSON string representing the serialized data.</param>
            <returns>The deserialised token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.SetExtendedData(Solidsoft.Reply.BarcodeScanner.Calibration.Token,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.Char,System.Char},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IList{System.Char},System.String,System.String,System.String,System.String,System.String,System.String,System.String,Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
              Returns an extended clone of the original token.
            </summary>
            <param name="token">The original token.</param>
            <param name="deadKeysMap">
              A dictionary of differences in reported and expected characters where the reported data uses
              dead keys.
            </param>
            <param name="deadKeyCharacterMap">
              A dictionary of initially detected differences in reported and expected characters
              where the reported data uses dead keys.
            </param>
            <param name="deadKeyFixUp">
              A dictionary of dead key characters that must be fixed up due to reporting of different character
              to the dead key character.
            </param>
            <param name="scannerDeadKeysMap">
              A dictionary of differences in reported and expected characters where the scanner
              keyboard layout uses dead keys.
            </param>
            <param name="scannerUnassignedKeys">
              A list of expected characters where the scanner keyboard layout key maps to an unassigned key on the computer
              keyboard layout.
            </param>
            <param name="characterMap">A dictionary of differences in reported and expected characters.</param>
            <param name="ligatureMap">A dictionary of candidate ligatures.</param>
            <param name="unrecognisedKeys">A list of characters that are not recognised by the scanner keyboard layout.</param>
            <param name="prefix">Any prefix observed during calibration.</param>
            <param name="code">Any code between the AIM ID (if present) and the data observed during calibration.</param>
            <param name="suffix">Any suffix observed during calibration.</param>
            <param name="reportedPrefix">Any prefix reported during calibration.</param>
            <param name="reportedCode">Any code between the AIM ID (if present) and the data reported during calibration.</param>
            <param name="reportedSuffix">Any suffix reported during calibration.</param>
            <param name="keyboardScript">The Unicode name of the keyboard script.</param>
            <param name="scannerKeyboardPerformance">The 'Traffic Light' assessment of the performance of the barcode scanner keyboard input.</param>
            <param name="aimFlagCharacterSequence">
              The first (flag) character. By default, this is "]". If a dead key is used, the
              sequence will contain two characters.
            </param>
            <param name="reportedCharacters">A regular expression for matching reported characters.</param>
            <param name="potentialIsoIec15434Unreadable30">
              A value indicating whether a Format 05 or 06 barcode may be unreadable due
              to non-representation of ASCII 30 character.
            </param>
            <param name="potentialIsoIec15434EdiUnreadableFs">
              A value indicating whether an EDI barcode may be unreadable due
              to non-representation of ASCII 28 characters.
            </param>
            <param name="potentialIsoIec15434EdiUnreadableUs">
              A value indicating whether an EDI barcode may be unreadable due
              to non-representation of ASCII 31 characters.
            </param>
            <param name="testSupportForFormat06">
              A value indicating whether to test for Format 06 and Format 05 support.
            </param>
            <param name="nonInvariantAmbiguities">
              A dictionary of ambiguous non-invariant ASCII characters that map to a reported character.
            </param>
            <param name="invariantGs1Ambiguities">
              A dictionary of ambiguous invariant or other characters that may be used in GS1-compliant barcodes.
            </param>
            <param name="nonInvariantUnrecognisedCharacters">
              A list of unrecognised non-invariant ASCII character sequences.
            </param>
            <param name="invariantGs1UnrecognisedCharacters">
              A list of unrecognised invariant or other character sequences that may be used in GS1-compliant barcodes.
            </param>
            <returns>The token with the extended data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Equals(Solidsoft.Reply.BarcodeScanner.Calibration.Token)">
            <summary>
              Tests the equality of this token with another, based on the key values, only.
            </summary>
            <param name="other">The token to be tested.</param>
            <returns>True, if the calibration tokens are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.Equals(System.Object)">
            <summary>
              Tests the equality of this token with another.
            </summary>
            <param name="obj">The token to be tested.</param>
            <returns>True, if the calibration tokens are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.GetHashCode">
            <summary>
              Returns a hash value for the current token.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.ToString">
            <summary>
              Returns a JSON representation of the calibration token.
            </summary>
            <returns>A JSON representation of the calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the calibration token.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.AbandonCalibrationSession">
            <summary>
              Marks the abandonment of the current calibration session.
            </summary>
            <returns>The token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.AddInformation(Solidsoft.Reply.BarcodeScanner.Calibration.InformationLevel,Solidsoft.Reply.BarcodeScanner.Calibration.InformationType,System.String)">
            <summary>
              Adds an information record to the correct collection.
            </summary>
            <param name="level">The information level. This is error, warning or information.</param>
            <param name="type">The information type.</param>
            <param name="description">The description of the information.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.AddInformation(Solidsoft.Reply.BarcodeScanner.Calibration.Information)">
            <summary>
              Adds an information record to the correct collection.
            </summary>
            <param name="information">The calibration information.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.RemoveInformation(Solidsoft.Reply.BarcodeScanner.Calibration.Information)">
            <summary>
              Removes an information record from the correct collection.
            </summary>
            <param name="information">The information to be removed.</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.Token.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
              Handles errors in serialization and deserialization.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData">
            <summary>
              A set of data passed as part of a calibration token. This data is always provided with the token but is
              primarily intended for internal use to track the enumeration of calibration barcodes.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData" /> class.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.#ctor(System.String,System.String,System.Char,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData" /> class.
            </summary>
            <param name="barcodeData">
              The unsegmented barcode data for the current calibration data.
            </param>
            <param name="key">
              The dead key currently being calibrated. Null indicates baseline calibration.
            </param>
            <param name="value">
              The expected character for the current dead key being calibrated.
            </param>
            <param name="calibrationsRemaining">
              A count of the estimated number of calibrations that still need to be performed during this session.
            </param>
            <param name="smallBarcodeSequenceIndex">
              The index of the current small barcode in a sequence.
            </param>
            <param name="smallBarcodeSequenceCount">
              The number of small barcodes that encode the current calibration data.
            </param>
            <param name="prefix">
              The prefix for each small barcode in a sequence.
            </param>
            <param name="suffix">
              The detected suffix.
            </param>
            <param name="reportedCharacters">
              The reported characters for the current calibration barcode.
            </param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.AdditionalBarcode">
            <summary>
              Gets a new key and value for an additional barcode.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.BarcodeData">
            <summary>
              Gets the unsegmented barcode data for the current calibration data.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.CalibrationsRemaining">
            <summary>
              Gets a count of the known number of calibrations to be performed this session.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.Key">
            <summary>
              Gets the dead key currently being calibrated. Null indicates baseline calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.ReportedCharacters">
            <summary>
              Gets the reported characters for the current calibration barcode. If the calibration barcode has been
              segmented into multiple small barcodes, this property contains the content of the currently processed
              small barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.ResetBarcodesRemainingCount">
            <summary>
              Gets a value indicating whether it is necessary to reset the 'bar codes remaining' count when yielding bar codes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.SmallBarcodeSequenceIndex">
            <summary>
              Gets the index number of the current small barcode.
            </summary>
            <remarks>
              Small barcodes are used when the calibrator limits the maximum number of characters in any one
              barcode to less than the number of characters for inclusion in a calibration barcode. The
              barcode is segmented into multiple barcodes. If a sequence of small barcodes is not used, this
              property is set to -1.
            </remarks>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.SmallBarcodeSequenceCount">
            <summary>
              Gets the number of small barcodes for the current calibration.
            </summary>
            <remarks>
              A sequence of small barcodes is used where the selected barcode size is too small
              to carry the calibration data.
            </remarks>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.Prefix">
            <summary>
              Gets the prefix, if any, transmitted by the barcode scanner.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.Suffix">
            <summary>
              Gets the suffix, if any, transmitted by the barcode scanner.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.Value">
            <summary>
              Gets the expected character for the current dead key being calibrated.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.op_Equality(Solidsoft.Reply.BarcodeScanner.Calibration.TokenData,Solidsoft.Reply.BarcodeScanner.Calibration.TokenData)">
            <summary>
              Override for the equality operator.
            </summary>
            <param name="tokenData1">The first calibration token data.</param>
            <param name="tokenData2">The second calibration token data.</param>
            <returns>True, if the calibration token data are equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.op_Inequality(Solidsoft.Reply.BarcodeScanner.Calibration.TokenData,Solidsoft.Reply.BarcodeScanner.Calibration.TokenData)">
            <summary>
              Override for the inequality operator.
            </summary>
            <param name="tokenData1">The first calibration token data.</param>
            <param name="tokenData2">The second calibration token data.</param>
            <returns>True, if the calibration token data are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.FromJson(System.String)">
            <summary>
              Returns a token representing a JSON representation of the token.
            </summary>
            <param name="json">A JSON string representing the serialized token.</param>
            <returns>The deserialised token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.Equals(Solidsoft.Reply.BarcodeScanner.Calibration.TokenData)">
            <summary>
              Indicates whether the current calibration token data is equal to another calibration token data object.
            </summary>
            <param name="other">A calibration token data object to compare with this current calibration token data object.</param>
            <returns>true if the current calibration token data object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.Equals(System.Object)">
            <summary>
              Indicates whether the current calibration token data is equal to another object.
            </summary>
            <param name="obj">An object to compare with this current calibration token data object.</param>
            <returns>true if the current calibration token data object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.GetHashCode">
            <summary>
              Returns a hash value for the current token.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.ToString">
            <summary>
              Returns a JSON representation of the calibration token data.
            </summary>
            <returns>A JSON representation of the calibration token data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the calibration token data.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration token data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenData.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
              Handles errors in serialization and deserialization.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData">
            <summary>
              A set of extended data passed as part of a calibration token. This data is only provided if the token is being
              used in a stateless enumeration of calibration barcodes using the NextCalibrationToken method.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData" /> class.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.Char,System.Char},System.Collections.Generic.IDictionary{System.String,System.Char},System.Collections.Generic.IList{System.Char},System.String,System.String,System.String,System.String,System.String,System.String,System.String,Solidsoft.Reply.BarcodeScanner.Calibration.ScannerKeyboardPerformance,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData" /> class.
            </summary>
            <param name="deadKeysMap">
              A dictionary of differences in reported and expected characters where the reported data uses dead keys.
            </param>
            <param name="deadKeyCharacterMap">
              A dictionary of initially detected differences in reported and expected characters where the reported data uses
              dead keys.
            </param>
            <param name="deadKeyFixUp">
              A dictionary of dead key characters that must be fixed up due to reporting of different character to the dead key character.
            </param>
            <param name="scannerDeadKeysMap">
              A dictionary of differences in reported and expected characters where the scanner keyboard layout uses dead keys.
            </param>
            <param name="scannerUnassignedKeys">
              A list of expected characters where the scanner keyboard layout key maps to an unassigned key on the computer
              keyboard layout.
            </param>
            <param name="characterMap">
              A dictionary of differences in reported and expected characters.
            </param>
            <param name="ligatureMap">
              A dictionary of candidate ligatures.
            </param>
            <param name="unrecognisedKeys">
              A list of characters that are not recognised by the scanner keyboard layout.
            </param>
            <param name="prefix">
              Any prefix observed during calibration.
            </param>
            <param name="code">
              Any code between the AIM ID (if present) and the data observed during calibration.
            </param>
            <param name="suffix">
              Any suffix observed during calibration.
            </param>
            <param name="reportedPrefix">
              Any prefix reported during calibration.
            </param>
            <param name="reportedCode">
              Any code between the AIM ID (if present) and the data reported during calibration.
            </param>
            <param name="reportedSuffix">
              Any suffix reported during calibration.
            </param>
            <param name="keyboardScript">
              The Unicode name of the keyboard script.
            </param>
            <param name="scannerKeyboardPerformance">
              'Traffic Light' assessment of the performance of the barcode scanner keyboard input.
            </param>
            <param name="aimFlagCharacterSequence">
              The first (flag) character. By default, this is "]". If a dead key is used, the sequence will contain two
              characters.
            </param>
            <param name="reportedCharacters">
              A regular expression for reported characters.
            </param>
            <param name="potentialIsoIec15434Unreadable30">
              A value indicating whether an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 30.
              character.
            </param>
            <param name="potentialIsoIec15434EdiUnreadableFs">
              A value indicating whether EDI data in an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 28.
            </param>
            <param name="potentialIsoIec15434EdiUnreadableUs">
              A value indicating whether EDI data in an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 31.
            </param>
            <param name="assessFormat06Support">
              A value indicating whether to assess Format 06 and Format 05 support.
            </param>
            <param name="nonInvariantAmbiguities">
              A dictionary of ambiguous non-invariant ASCII characters that map to a reported character.
            </param>
            <param name="invariantGs1Ambiguities">
              A dictionary of ambiguous invariant or other characters that may be used in GS1-compliant barcodes.
            </param>
            <param name="nonInvariantUnrecognisedCharacters">
              A list of unrecognised non-invariant ASCII character sequences.
            </param>
            <param name="invariantGs1UnrecognisedCharacters">
              A list of unrecognised invariant or other character sequences that may be used in GS1-compliant barcodes.
            </param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.AimFlagCharacterSequence">
            <summary>
              Gets the first (flag) character. By default, this is "]".
              If a dead key is used, the sequence will contain two characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.CharacterMap">
            <summary>
              Gets a dictionary of differences in reported and expected characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.DeadKeysMap">
            <summary>
              Gets a dictionary of differences in reported and expected characters where the reported data uses dead keys.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.DeadKeyCharacterMap">
            <summary>
              Gets a dictionary of initially detected differences in reported and expected characters where the reported data
              uses dead keys.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.DeadKeyFixUp">
            <summary>
              Gets a dictionary of the dead key fix up characters detected during baseline calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ScannerDeadKeysMap">
            <summary>
              Gets a dictionary of differences in reported and expected characters where the scanner keyboard layout uses dead
              keys.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ScannerUnassignedKeys">
            <summary>
              Gets a list of expected characters where the scanner keyboard layout key maps to an unassigned key on the computer
              keyboard layout.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.LigatureMap">
            <summary>
              Gets a dictionary of candidate ligatures.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ReportedCharacters">
            <summary>
              Gets a regular expression for matching reported characters.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.Prefix">
            <summary>
              Gets any prefix observed during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.Code">
            <summary>
              Gets any code between the AIM ID (if present) and the data observed during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.Suffix">
            <summary>
              Gets any suffix observed during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ReportedPrefix">
            <summary>
              Gets any prefix reported during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ReportedCode">
            <summary>
              Gets any code between the AIM ID (if present) and the data reported during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ReportedSuffix">
            <summary>
              Gets any suffix reported during calibration.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.KeyboardScript">
            <summary>
              Gets the Unicode name of the keyboard script.
            </summary>
            <remarks>
              The library can only detect the keyboard script by heuristic analysis of the
              reported data. This value does not refer t the keyboard layout, but rather
              to the characters that the keyboard predominantly represents.
            </remarks>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ScannerKeyboardPerformance">
            <summary>
              Gets the 'Traffic Light' assessment of the performance of the barcode scanner keyboard input.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.UnrecognisedKeys">
            <summary>
              Gets a list of characters that are not recognised by the scanner keyboard layout.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.PotentialIsoIec15434Unreadable30">
            <summary>
              Gets a value indicating whether an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 30.
              character.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.PotentialIsoIec15434EdiUnreadableFs">
            <summary>
              Gets a value indicating whether EDI data in an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 28.
              character.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.PotentialIsoIec15434EdiUnreadableUs">
            <summary>
              Gets a value indicating whether EDI data in an ISO/IEC 15434 barcode may be unreadable due to non-representation of ASCII 31.
              character.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.AssessFormat06Support">
            <summary>
              Gets a value indicating whether to assess Format 06 and Format 05 support.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.NonInvariantAmbiguities">
            <summary>
              Gets a dictionary of ambiguous non-invariant ASCII character sequences that map to a reported character.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.InvariantGs1Ambiguities">
            <summary>
              Gets a dictionary of ambiguous invariant or other character sequences that may be used in GS1-compliant barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.NonInvariantUnrecognisedCharacters">
            <summary>
              Gets a list of unrecognised non-invariant character sequences.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.InvariantGs1UnrecognisedCharacters">
            <summary>
              Gets a list of unrecognised invariant or other character sequences that may be used in GS1-compliant barcodes.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.LatestError">
            <summary>
              Gets the latest serialization or deserialization error.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.op_Equality(Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData,Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData)">
            <summary>
              Override for the equality operator.
            </summary>
            <param name="tokenExtendedData1">The first calibration token extended data.</param>
            <param name="tokenExtendedData2">The second calibration token extended data.</param>
            <returns>True, if the calibration token extended data are equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.op_Inequality(Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData,Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData)">
            <summary>
              Override for the inequality operator.
            </summary>
            <param name="tokenExtendedData1">The first calibration token extended data.</param>
            <param name="tokenExtendedData2">The second calibration token extended data.</param>
            <returns>True, if the calibration token extended data are not equal; otherwise false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.FromJson(System.String)">
            <summary>
              Initializes the token extended data from a JSON string representing the serialized data.
            </summary>
            <param name="json">A JSON string representing the serialized data.</param>
            <returns>Extended data for inclusion in the token.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.Equals(Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData)">
            <summary>
              Indicates whether the current calibration token extended data is equal to another calibration token extended data
              object.
            </summary>
            <param name="other">
              A calibration token extended data object to compare with this current calibration token extended
              data object.
            </param>
            <returns>true if the current calibration token extended data object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.Equals(System.Object)">
            <summary>
              Indicates whether the current calibration token extended data is equal to another object.
            </summary>
            <param name="obj">An object to compare with this current calibration token extended data object.</param>
            <returns>true if the current calibration token extended data object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.GetHashCode">
            <summary>
              Returns a hash value for the current token.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ToString">
            <summary>
              Returns a JSON representation of the calibration token extended data.
            </summary>
            <returns>A JSON representation of the calibration token extended data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.ToJson(Newtonsoft.Json.Formatting)">
            <summary>
              Returns a JSON representation of the calibration token extended data.
            </summary>
            <param name="formatting">Specifies the formatting to be applied to the JSON.</param>
            <returns>A JSON representation of the calibration token extended data.</returns>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.TokenExtendedData.OnError(System.Runtime.Serialization.StreamingContext,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
              Handles errors in serialization and deserialization.
            </summary>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.UnicodeBlocks">
            <summary>
              Resolves a sequence of characters to a Unicode block that heuristically represents the kind of
              keyboard configured in the OS.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.BarcodeScanner.Calibration.UnicodeBlocks.UnicodeBlocksDictionary">
            <summary>
              A dictionary of ranges for each Unicode block.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.UnicodeBlocks.ResolveScript(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Resolve the keyboard script for sequences representing upper and lower case characters.
            </summary>
            <param name="upperCaseSequences">A sequence representing upper case characters.</param>
            <param name="lowerCaseSequences">A sequence representing lower case characters.</param>
            <returns>The name of the Unicode block representing the keyboard script for the sequences.</returns>
        </member>
        <member name="T:Solidsoft.Reply.BarcodeScanner.Calibration.UnrecognisedCharacter">
            <summary>
              Represents a calibration ambiguity for an expected character sequence and two or more reported sequences of characters.
            </summary>
            <param name="Expected">Gets the expected character.</param>
            <param name="InvariantCharactersOnly">
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</param>
        </member>
        <member name="M:Solidsoft.Reply.BarcodeScanner.Calibration.UnrecognisedCharacter.#ctor(System.String,System.Boolean)">
            <summary>
              Represents a calibration ambiguity for an expected character sequence and two or more reported sequences of characters.
            </summary>
            <param name="Expected">Gets the expected character.</param>
            <param name="InvariantCharactersOnly">
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</param>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.UnrecognisedCharacter.Expected">
            <summary>Gets the expected character.</summary>
        </member>
        <member name="P:Solidsoft.Reply.BarcodeScanner.Calibration.UnrecognisedCharacter.InvariantCharactersOnly">
            <summary>
              Gets a value indicating whether the expected character sequence contains only invariant characters.
            .</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LineTerminators_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LineTerminators method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LineTerminators_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LineTerminators_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LineTerminators_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LineTerminators_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LineTerminators_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LineTerminators_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LineTerminators_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LineTerminators_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ControlCharTerminators_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ControlCharTerminators method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ControlCharTerminators_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AimIdentifierMatchRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierMatchRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AimIdentifierUnrecognisedFlagMatchRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AimIdentifierUnrecognisedFlagMatchRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the InvariantsMatchRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantsMatchRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DeadKeyAsciiControlCharacterSequenceRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeyAsciiControlCharacterSequenceRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DeadKeysRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DeadKeysRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DeadKeysRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Case1TempSpaceHolderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case1TempSpaceHolderRegex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Case2TempSpaceHolderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Case2TempSpaceHolderRegex_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NonMatchingDeadKeyComputerKeyboardRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonMatchingDeadKeyComputerKeyboardRegex_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ThreeSpaceTempSpaceHolderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThreeSpaceTempSpaceHolderRegex_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TwoSpaceTempSpaceHolderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TwoSpaceTempSpaceHolderRegex_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UnassignedKeysRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnassignedKeysRegex_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the BarcodeScannerDeadKeysFilter1Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter1Regex_13.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the BarcodeScannerDeadKeysFilter2Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BarcodeScannerDeadKeysFilter2Regex_14.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ChainedDeadKeysFilter2Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChainedDeadKeysFilter2Regex_15.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SuffixRegex_16">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SuffixRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SuffixRegex_16.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SuffixRegex_16.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SuffixRegex_16.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SuffixRegex_16.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SuffixRegex_16.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SuffixRegex_16.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SuffixRegex_16.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SuffixRegex_16.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllSpaces_17">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AllSpaces method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AllSpaces_17.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllSpaces_17.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllSpaces_17.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllSpaces_17.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllSpaces_17.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllSpaces_17.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllSpaces_17.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PrefixRegex_18">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PrefixRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PrefixRegex_18.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PrefixRegex_18.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PrefixRegex_18.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PrefixRegex_18.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PrefixRegex_18.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PrefixRegex_18.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PrefixRegex_18.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PrefixRegex_18.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_995DABD976AF3FFEAE9C66F44B4DB8D1E3D266031E8E71EE3CE8CBB0C265A9D0(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [\s\s\s\s\s\s].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptWhiteSpace">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f!\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_E6FFFFFFFEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "!\"%&amp;'()*+,-./0123456789:;&lt;=&gt;?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
