<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdviceItemRemainingMismatch" xml:space="preserve">
    <value>Advice items remaining mismatch.</value>
    <comment>Error</comment>
  </data>
  <data name="CalibrationIncorrectErrorInformationType" xml:space="preserve">
    <value>Incorrect error information type.</value>
  </data>
  <data name="CalibrationIncorrectInformationalInformationType" xml:space="preserve">
    <value>Incorrect informational information type.</value>
  </data>
  <data name="CalibrationIncorrectWarningInformationType" xml:space="preserve">
    <value>Incorrect warning information type.</value>
  </data>
  <data name="Calibration_Error_001" xml:space="preserve">
    <value>Failed to insert space placeholders. </value>
    <comment>Error</comment>
  </data>
  <data name="Calibration_Error_002" xml:space="preserve">
    <value>Invalid argument provided to regular expression Replace method.</value>
    <comment>Error</comment>
  </data>
  <data name="Calibration_Error_003" xml:space="preserve">
    <value>The regular expression timed out while performing a match.</value>
    <comment>Error</comment>
  </data>
  <data name="UnusedExtendedAsciiCharacterNotFound" xml:space="preserve">
    <value>Cannot find suitable character for temporary placeholder. All extended ASCII characters are already used in the input string.</value>
    <comment>Error</comment>
  </data>
  <data name="CalibrateDeadKeyIncorrectBarcodeProvenance" xml:space="preserve">
    <value>Incorrect barcode provenance.</value>
  </data>
  <data name="CalibrationInvalidInformationLevel" xml:space="preserve">
    <value>Invalid information level.</value>
  </data>
  <data name="CalibrationInvalidAdviceItem" xml:space="preserve">
    <value>Invalid advice item.</value>
  </data>
  <data name="Barcodes_Error_100" xml:space="preserve">
    <value>Suffix {0} does not match expected suffix {1}.</value>
    <comment>Error</comment>
  </data>
  <data name="CalibrationInformation_130" xml:space="preserve">
    <value>AIM identifiers are supported.</value>
  </data>
  <data name="CalibrationInformation_131" xml:space="preserve">
    <value>The barcode scanner is transmitting an AIM identifier: {0}</value>
  </data>
  <data name="CalibrationInformation_132" xml:space="preserve">
    <value>The barcode scanner may be transmitting an AIM identifier: {0}</value>
  </data>
  <data name="CalibrationInformation_150" xml:space="preserve">
    <value>The barcode scanner is transmitting an end-of-line character sequence: {0}</value>
  </data>
  <data name="CalibrationInformation_160" xml:space="preserve">
    <value>Group Separator characters are supported.</value>
  </data>
  <data name="CalibrationInformation_161" xml:space="preserve">
    <value>Record Separator characters are supported.</value>
  </data>
  <data name="CalibrationInformation_170" xml:space="preserve">
    <value>The barcode scanner may be configured to compensate for Caps Lock.</value>
  </data>
  <data name="CalibrationInformation_180" xml:space="preserve">
    <value>The computer keyboard supports the following script: {0}</value>
  </data>
  <data name="CalibrationInformation_190" xml:space="preserve">
    <value>The computer keyboard is configured for the following platform: {0}</value>
  </data>
  <data name="CalibrationInformation_200" xml:space="preserve">
    <value>Some non-invariant ASCII characters cannot be detected.</value>
  </data>
  <data name="CalibrationInformation_201" xml:space="preserve">
    <value>Some non-invariant ASCII characters are not recognised: {0}</value>
  </data>
  <data name="CalibrationInformation_202" xml:space="preserve">
    <value>Some combinations of non-invariant ASCII characters are not recognised: {0}</value>
  </data>
  <data name="CalibrationInformation_210" xml:space="preserve">
    <value>Barcodes that use ISO/IEC 15434 syntax cannot be recognised.</value>
  </data>
  <data name="CalibrationInformation_211" xml:space="preserve">
    <value>Barcodes that use ISO/IEC 15434 syntax to represent EDI data cannot be reliably read.</value>
  </data>
  <data name="CalibrationInformation_212" xml:space="preserve">
    <value>The reported character {0} is ambiguous. Barcodes that use ISO/IEC 15434 syntax cannot be read reliably.</value>
  </data>
  <data name="CalibrationInformation_220" xml:space="preserve">
    <value>The barcode scanner is not transmitting an AIM Identifier.</value>
  </data>
  <data name="CalibrationInformation_221" xml:space="preserve">
    <value>The AIM Identifier cannot be recognised.</value>
  </data>
  <data name="CalibrationInformation_230" xml:space="preserve">
    <value>The barcode scanner is transmitting a prefix: {0}</value>
  </data>
  <data name="CalibrationInformation_231" xml:space="preserve">
    <value>The barcode scanner is transmitting a code: {0}</value>
  </data>
  <data name="CalibrationInformation_232" xml:space="preserve">
    <value>The barcode scanner is transmitting a suffix: {0}</value>
  </data>
  <data name="CalibrationInformation_240" xml:space="preserve">
    <value>The barcode scanner is not transmitting an end-of-line character sequence (e.g. a carriage return).</value>
  </data>
  <data name="CalibrationInformation_250" xml:space="preserve">
    <value>The reported character {0} is ambiguous. There are multiple keys for the same character, each representing a different expected character. However, at most, only one of the expected characters is invariant.</value>
  </data>
  <data name="CalibrationInformation_251" xml:space="preserve">
    <value>Some reported characters are ambiguous. There are multiple keys for the same character, each representing a different non-invariant expected ASCII character: {0}</value>
  </data>
  <data name="CalibrationInformation_252" xml:space="preserve">
    <value>AIM Identifiers cannot be recognised. The reported character {0} is ambiguous. There are multiple keys for this character which represents the AIM flag character as well as other expected character(s).</value>
  </data>
  <data name="CalibrationInformation_253" xml:space="preserve">
    <value>Some reported non-invariant ASCII characters are ambiguous: {0}</value>
  </data>
  <data name="CalibrationInformation_256" xml:space="preserve">
    <value>The reported character sequence {0} is ambiguous. This may prevent reading of any additional data elements included in a barcode.</value>
  </data>
  <data name="CalibrationInformation_255" xml:space="preserve">
    <value>Some reported character sequences are ambiguous. These characters do not represent invariant characters: {0}</value>
  </data>
  <data name="CalibrationInformation_260" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond</value>
  </data>
  <data name="CalibrationInformation_261" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond for invariant characters.</value>
  </data>
  <data name="CalibrationInformation_262" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond for non-invariant ASCII characters.</value>
  </data>
  <data name="CalibrationInformation_263" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond when representing Group Separators.</value>
  </data>
  <data name="CalibrationInformation_264" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond when representing Record Separators.</value>
  </data>
  <data name="CalibrationInformation_266" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond when representing AIM identifiers.</value>
  </data>
  <data name="CalibrationInformation_270" xml:space="preserve">
    <value>Caps Lock is switched on.</value>
  </data>
  <data name="CalibrationInformation_271" xml:space="preserve">
    <value>Caps Lock may be switched on.</value>
  </data>
  <data name="CalibrationInformation_272" xml:space="preserve">
    <value>The barcode scanner may be configured to convert characters to upper case.</value>
  </data>
  <data name="CalibrationInformation_273" xml:space="preserve">
    <value>The barcode scanner may be configured to convert characters to lower case.</value>
  </data>
  <data name="CalibrationInformation_274" xml:space="preserve">
    <value>The barcode scanner may be configured to invert character case.</value>
  </data>
  <data name="CalibrationInformation_280" xml:space="preserve">
    <value>The best reported keyboard data entry time during calibration indicates that the barcode scanner does not perform optimally.</value>
  </data>
  <data name="CalibrationInformation_300" xml:space="preserve">
    <value>No calibration data was reported.</value>
  </data>
  <data name="CalibrationInformation_301" xml:space="preserve">
    <value>The reported data is unrecognised. The wrong barcode may have been scanned.</value>
  </data>
  <data name="CalibrationInformation_302" xml:space="preserve">
    <value>Too many characters detected. The wrong barcode may have been scanned.</value>
  </data>
  <data name="CalibrationInformation_303" xml:space="preserve">
    <value>Partial data was reported for calibration barcode.</value>
  </data>
  <data name="CalibrationInformation_304" xml:space="preserve">
    <value>The reported data is for the wrong calibration barcode.</value>
  </data>
  <data name="CalibrationInformation_310" xml:space="preserve">
    <value>Some invariant characters cannot be detected.</value>
  </data>
  <data name="CalibrationInformation_311" xml:space="preserve">
    <value>Some invariant characters are not recognised by the barcode scanner in its current configuration: {0}</value>
  </data>
  <data name="CalibrationInformation_312" xml:space="preserve">
    <value>Some key combinations that include invariant characters are not recognised: {0}</value>
  </data>
  <data name="CalibrationInformation_320" xml:space="preserve">
    <value>No group separator is reported.</value>
  </data>
  <data name="CalibrationInformation_360" xml:space="preserve">
    <value>The reported character {0} is ambiguous. There are multiple keys for the same character, each representing a different expected character.</value>
  </data>
  <data name="CalibrationInformation_361" xml:space="preserve">
    <value>The reported character {0} is ambiguous. The same character is reported for multiple dead key sequences representing different expected characters.</value>
  </data>
  <data name="CalibrationInformation_362" xml:space="preserve">
    <value>The reported dead key character {0} is ambiguous. There are multiple dead keys for the same character, each representing a different expected character.</value>
  </data>
  <data name="CalibrationInformation_363" xml:space="preserve">
    <value>The reported character sequence {0} is ambiguous. The same sequence is reported for multiple expected character sequences.</value>
  </data>
  <data name="CalibrationInformation_364" xml:space="preserve">
    <value>The reported character sequence {0} is ambiguous. The same sequence is reported for multiple dead keys in the barcode scanner's keyboard layout.</value>
  </data>
  <data name="CalibrationInformation_365" xml:space="preserve">
    <value>The character {0} cannot be represented reliably because of incompatibility with the keyboard layout.</value>
  </data>
  <data name="CalibrationInformation_366" xml:space="preserve">
    <value>The reported character sequence {0} is ambiguous. This represents the group separator character.</value>
  </data>
  <data name="CalibrationInformation_367" xml:space="preserve">
    <value>Some reported characters are ambiguous. They can be reported individually but are also used to compose ligatures: {0}</value>
  </data>
  <data name="CalibrationInformation_370" xml:space="preserve">
    <value>The reported calibration data cannot be processed. It does not include expected delimiters.</value>
  </data>
  <data name="CalibrationInformation_371" xml:space="preserve">
    <value>The reported calibration data cannot be processed. No character can be determined to act as a temporary delimiter.</value>
  </data>
  <data name="CalibrationInformation_390" xml:space="preserve">
    <value>Calibration failed. {0}</value>
  </data>
  <data name="CalibrationInformation_162" xml:space="preserve">
    <value>EDI separator characters are supported.</value>
  </data>
  <data name="CalibrationInformation_254" xml:space="preserve">
    <value>The reported character {0} is ambiguous. Barcodes that use ISO/IEC 15434 syntax to represent EDI data cannot be reliably read.</value>
  </data>
  <data name="CalibrationInformation_265" xml:space="preserve">
    <value>The barcode scanner and computer keyboard layouts do not correspond when representing EDI separators.</value>
  </data>
  <data name="CalibrationInformation_267" xml:space="preserve">
    <value>The correspondence of the barcode scanner and computer keyboard layouts cannot be determined.</value>
  </data>
  <data name="Unspecified" xml:space="preserve">
    <value>unspecified</value>
    <comment>new</comment>
  </data>
  <data name="CalibrationInformation_391" xml:space="preserve">
    <value>Calibration failed. {0}</value>
  </data>
  <data name="CalibrationInformation_305" xml:space="preserve">
    <value>An attempt was made to calibrate a barcode, but no calibration token was provided.</value>
  </data>
  <data name="CalibrationInformation_163" xml:space="preserve">
    <value>Unit separator characters are supported.</value>
  </data>
  <data name="CalibrationInformation_257" xml:space="preserve">
    <value>The reported character {0} is ambiguous. Barcodes that use ASCII 28 or ASCII 31 control characters may not be reliably read.</value>
  </data>
  <data name="CalibrationInformation_213" xml:space="preserve">
    <value>The file separator character cannot be reliably read.</value>
  </data>
  <data name="CalibrationInformation_214" xml:space="preserve">
    <value>The unit separator character cannot be reliably read.</value>
  </data>
  <data name="CalibrationInformation_215" xml:space="preserve">
    <value>The end-of-transmission character cannot be reliably read.</value>
  </data>
  <data name="AdviceItemRemainingMismatch" xml:space="preserve">
    <value />
  </data>
  <data name="CalibrationInformation_164" xml:space="preserve">
    <value>End-of-Transmission characters are supported.</value>
  </data>
  <data name="String" xml:space="preserve">
    <value />
  </data>
</root>